# -*- coding: utf-8 -*-
"""
Created on Sun Mar 26 22:25:42 2023

@author: Administrator
"""


import xlrd

import matplotlib.pyplot as plt

import numpy as np

from scipy.optimize import minimize, rosen, rosen_der

from scipy.stats import linregress




import numpy as np
import pandas as pd
import os
import pickle
import scipy as sp
import datetime


import numpy as np

import scipy as sp

import math

from numpy import matmul as mm
from math import sqrt,pi,log, exp

import xlrd

import matplotlib.pyplot as plt

import numpy as np

from scipy.optimize import minimize, rosen, rosen_der

from scipy.stats import linregress

from scipy.stats import norm


import scipy.io as scio


print(os.path.abspath(os.path.join(os.getcwd(), "../..")))
last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../.."))

print(os.path.abspath(os.path.join(os.getcwd(), "..")))
last_path=os.path.abspath(os.path.join(os.getcwd(), ".."))

print(os.path.abspath(os.path.join(os.getcwd(), "../../..")))
last_last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../../.."))


print(os.path.abspath(os.path.join(os.getcwd(), "../../../..")))
last_last_last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../../../.."))





Si=[57, 25, 32, 35, 37, 40, 42, 43, 46, 48, 41, 32, 38, 37, 40, 41, 43, 46, 46, 46, 47, 51, 40, 38, 40, 43, 32, 32, 34, 36, 37, 42, 39, 40, 28, 30, 29, 30, 30, 31, 33, 32, 33, 35, 34, 35, 42, 38, 37, 39, 40, 41, 39, 42, 43, 41, 49, 47, 48, 46, 53, 53, 48, 46, 49, 38, 39, 48, 43, 30, 41, 38, 41, 43, 44, 21, 14, 11, 0, 13, 0, 0, 5, 22, 14, 0]
     
Zhang=[14, 15, 41, 52, 54, 55, 57, 57, 57, 58, 58, 48, 35, 41, 39, 40, 40, 40, 41, 40, 39, 39, 40, 30, 28, 29, 30, 21, 20, 21, 22, 22, 24, 22, 22, 14, 15, 14, 14, 14, 14, 15, 14, 14, 15, 14, 14, 16, 15, 14, 15, 15, 15, 14, 15, 15, 14, 16, 15, 15, 15, 16, 16, 15, 14, 15, 11, 11, 14, 12, 8, 11, 10, 11, 11, 12, 5, 3, 2, 0, 2, 0, 0, 0, 5, 2]
DCNN=[53.293327, 53.308586, 52.25776, 50.868267, 49.517498, 48.15722, 46.78237, 45.45514, 44.5608, 44.213245, 43.093254, 41.84089, 40.156425, 38.357307, 36.545918, 34.712627, 33.02111, 31.47141, 30.372427, 29.987188, 29.831493, 29.653675, 29.180141, 28.398905, 27.815289, 27.04422, 26.0629, 25.120876, 24.234377, 23.240973, 22.323774, 21.454617, 21.090029, 20.588352, 19.938559, 19.128391, 18.018799, 16.789806, 15.533107, 14.494667, 13.608917, 12.647665, 11.8576765, 11.224333, 10.598362, 10.096522, 9.655268, 9.160848, 8.693614, 8.226995, 8.004075, 7.8854227, 7.9010925, 7.9804306, 7.901428, 7.9004693, 7.910248, 7.9891663, 8.015012, 8.05662, 8.236889, 8.441938, 8.570276, 8.882413, 9.109388, 9.081394, 9.071549, 9.237994, 9.096155, 8.986002, 8.719963, 8.331375, 7.945025, 7.982029]
        
TaFCN=[44.21796, 42.805122, 42.043377, 41.26773, 40.437565, 39.301758, 38.085163, 36.953697, 35.64536, 34.2916, 32.98562, 31.647074, 30.127924, 28.324146, 26.934727, 26.329594, 25.737942, 24.74506, 23.52901, 23.882565, 23.427698, 23.251583, 22.276297, 21.29385, 20.627192, 20.35797, 19.921137, 19.38269, 18.840317, 18.60413, 18.263926, 17.95653, 17.503567, 16.980068, 16.237957, 15.419586, 14.483716, 13.468272, 12.544446, 11.787228, 11.157798, 10.658507, 10.224942, 9.760351, 9.311747, 8.85345, 8.351404, 7.8764696, 7.483403, 7.159368, 6.891464, 6.7258024, 6.7476144, 6.784125, 6.873828, 6.945498, 7.0724053, 7.1963983, 7.3313003, 7.4637733, 7.6273794, 7.703505, 7.714101, 7.6956434, 7.61364, 7.5363793, 7.443631, 7.3159614, 7.177247, 6.9668517, 6.8047357, 6.5526075, 6.2302856, 5.7974715]

Our=[24, 27, 26, 35, 34, 33, 32, 36, 35, 29, 18, 52, 63, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]

groud_truth=[822.0, 821.0, 820.0, 819.0, 818.0, 817.0, 816.0, 815.0, 814.0, 813.0, 812.0, 811.0, 810.0, 809.0, 808.0, 807.0, 806.0, 805.0, 804.0, 803.0, 802.0, 801.0, 800.0, 799.0, 798.0, 797.0, 796.0, 795.0, 794.0, 793.0, 792.0, 791.0, 790.0, 789.0, 788.0, 787.0, 786.0, 785.0, 784.0, 783.0, 782.0, 781.0, 780.0, 779.0, 778.0, 777.0, 776.0, 775.0, 774.0, 773.0, 772.0, 771.0, 770.0, 769.0, 768.0, 767.0, 766.0, 765.0, 764.0, 763.0, 762.0, 761.0, 760.0, 759.0, 758.0, 757.0, 756.0, 755.0, 754.0, 753.0, 752.0, 751.0, 750.0, 749.0, 748.0, 747.0, 746.0, 745.0, 744.0, 743.0, 742.0, 741.0, 740.0, 739.0, 738.0, 737.0, 736.0, 735.0, 734.0, 733.0, 732.0, 731.0, 730.0, 729.0, 728.0, 727.0, 726.0, 725.0, 724.0, 723.0, 722.0, 721.0, 720.0, 719.0, 718.0, 717.0, 716.0, 715.0, 714.0, 713.0, 712.0, 711.0, 710.0, 709.0, 708.0, 707.0, 706.0, 705.0, 704.0, 703.0, 702.0, 701.0, 700.0, 699.0, 698.0, 697.0, 696.0, 695.0, 694.0, 693.0, 692.0, 691.0, 690.0, 689.0, 688.0, 687.0, 686.0, 685.0, 684.0, 683.0, 682.0, 681.0, 680.0, 679.0, 678.0, 677.0, 676.0, 675.0, 674.0, 673.0, 672.0, 671.0, 670.0, 669.0, 668.0, 667.0, 666.0, 665.0, 664.0, 663.0, 662.0, 661.0, 660.0, 659.0, 658.0, 657.0, 656.0, 655.0, 654.0, 653.0, 652.0, 651.0, 650.0, 649.0, 648.0, 647.0, 646.0, 645.0, 644.0, 643.0, 642.0, 641.0, 640.0, 639.0, 638.0, 637.0, 636.0, 635.0, 634.0, 633.0, 632.0, 631.0, 630.0, 629.0, 628.0, 627.0, 626.0, 625.0, 624.0, 623.0, 622.0, 621.0, 620.0, 619.0, 618.0, 617.0, 616.0, 615.0, 614.0, 613.0, 612.0, 611.0, 610.0, 609.0, 608.0, 607.0, 606.0, 605.0, 604.0, 603.0, 602.0, 601.0, 600.0, 599.0, 598.0, 597.0, 596.0, 595.0, 594.0, 593.0, 592.0, 591.0, 590.0, 589.0, 588.0, 587.0, 586.0, 585.0, 584.0, 583.0, 582.0, 581.0, 580.0, 579.0, 578.0, 577.0, 576.0, 575.0, 574.0, 573.0, 572.0, 571.0, 570.0, 569.0, 568.0, 567.0, 566.0, 565.0, 564.0, 563.0, 562.0, 561.0, 560.0, 559.0, 558.0, 557.0, 556.0, 555.0, 554.0, 553.0, 552.0, 551.0, 550.0, 549.0, 548.0, 547.0, 546.0, 545.0, 544.0, 543.0, 542.0, 541.0, 540.0, 539.0, 538.0, 537.0, 536.0, 535.0, 534.0, 533.0, 532.0, 531.0, 530.0, 529.0, 528.0, 527.0, 526.0, 525.0, 524.0, 523.0, 522.0, 521.0, 520.0, 519.0, 518.0, 517.0, 516.0, 515.0, 514.0, 513.0, 512.0, 511.0, 510.0, 509.0, 508.0, 507.0, 506.0, 505.0, 504.0, 503.0, 502.0, 501.0, 500.0, 499.0, 498.0, 497.0, 496.0, 495.0, 494.0, 493.0, 492.0, 491.0, 490.0, 489.0, 488.0, 487.0, 486.0, 485.0, 484.0, 483.0, 482.0, 481.0, 480.0, 479.0, 478.0, 477.0, 476.0, 475.0, 474.0, 473.0, 472.0, 471.0, 470.0, 469.0, 468.0, 467.0, 466.0, 465.0, 464.0, 463.0, 462.0, 461.0, 460.0, 459.0, 458.0, 457.0, 456.0, 455.0, 454.0, 453.0, 452.0, 451.0, 450.0, 449.0, 448.0, 447.0, 446.0, 445.0, 444.0, 443.0, 442.0, 441.0, 440.0, 439.0, 438.0, 437.0, 436.0, 435.0, 434.0, 433.0, 432.0, 431.0, 430.0, 429.0, 428.0, 427.0, 426.0, 425.0, 424.0, 423.0, 422.0, 421.0, 420.0, 419.0, 418.0, 417.0, 416.0, 415.0, 414.0, 413.0, 412.0, 411.0, 410.0, 409.0, 408.0, 407.0, 406.0, 405.0, 404.0, 403.0, 402.0, 401.0, 400.0, 399.0, 398.0, 397.0, 396.0, 395.0, 394.0, 393.0, 392.0, 391.0, 390.0, 389.0, 388.0, 387.0, 386.0, 385.0, 384.0, 383.0, 382.0, 381.0, 380.0, 379.0, 378.0, 377.0, 376.0, 375.0, 374.0, 373.0, 372.0, 371.0, 370.0, 369.0, 368.0, 367.0, 366.0, 365.0, 364.0, 363.0, 362.0, 361.0, 360.0, 359.0, 358.0, 357.0, 356.0, 355.0, 354.0, 353.0, 352.0, 351.0, 350.0, 349.0, 348.0, 347.0, 346.0, 345.0, 344.0, 343.0, 342.0, 341.0, 340.0, 339.0, 338.0, 337.0, 336.0, 335.0, 334.0, 333.0, 332.0, 331.0, 330.0, 329.0, 328.0, 327.0, 326.0, 325.0, 324.0, 323.0, 322.0, 321.0, 320.0, 319.0, 318.0, 317.0, 316.0, 315.0, 314.0, 313.0, 312.0, 311.0, 310.0, 309.0, 308.0, 307.0, 306.0, 305.0, 304.0, 303.0, 302.0, 301.0, 300.0, 299.0, 298.0, 297.0, 296.0, 295.0, 294.0, 293.0, 292.0, 291.0, 290.0, 289.0, 288.0, 287.0, 286.0, 285.0, 284.0, 283.0, 282.0, 281.0, 280.0, 279.0, 278.0, 277.0, 276.0, 275.0, 274.0, 273.0, 272.0, 271.0, 270.0, 269.0, 268.0, 267.0, 266.0, 265.0, 264.0, 263.0, 262.0, 261.0, 260.0, 259.0, 258.0, 257.0, 256.0, 255.0, 254.0, 253.0, 252.0, 251.0, 250.0, 249.0, 248.0, 247.0, 246.0, 245.0, 244.0, 243.0, 242.0, 241.0, 240.0, 239.0, 238.0, 237.0, 236.0, 235.0, 234.0, 233.0, 232.0, 231.0, 230.0, 229.0, 228.0, 227.0, 226.0, 225.0, 224.0, 223.0, 222.0, 221.0, 220.0, 219.0, 218.0, 217.0, 216.0, 215.0, 214.0, 213.0, 212.0, 211.0, 210.0, 209.0, 208.0, 207.0, 206.0, 205.0, 204.0, 203.0, 202.0, 201.0, 200.0, 199.0, 198.0, 197.0, 196.0, 195.0, 194.0, 193.0, 192.0, 191.0, 190.0, 189.0, 188.0, 187.0, 186.0, 185.0, 184.0, 183.0, 182.0, 181.0, 180.0, 179.0, 178.0, 177.0, 176.0, 175.0, 174.0, 173.0, 172.0, 171.0, 170.0, 169.0, 168.0, 167.0, 166.0, 165.0, 164.0, 163.0, 162.0, 161.0, 160.0, 159.0, 158.0, 157.0, 156.0, 155.0, 154.0, 153.0, 152.0, 151.0, 150.0, 149.0, 148.0, 147.0, 146.0, 145.0, 144.0, 143.0, 142.0, 141.0, 140.0, 139.0, 138.0, 137.0, 136.0, 135.0, 134.0, 133.0, 132.0, 131.0, 130.0, 129.0, 128.0, 127.0, 126.0, 125.0, 124.0, 123.0, 122.0, 121.0, 120.0, 119.0, 118.0, 117.0, 116.0, 115.0, 114.0, 113.0, 112.0, 111.0, 110.0, 109.0, 108.0, 107.0, 106.0, 105.0, 104.0, 103.0, 102.0, 101.0, 100.0, 99.0, 98.0, 97.0, 96.0, 95.0, 94.0, 93.0, 92.0, 91.0, 90.0, 89.0, 88.0, 87.0, 86.0, 85.0, 84.0, 83.0, 82.0, 81.0, 80.0, 79.0, 78.0, 77.0, 76.0, 75.0, 74.0, 73.0, 72.0, 71.0, 70.0, 69.0, 68.0, 67.0, 66.0, 65.0, 64.0, 63.0, 62.0, 61.0, 60.0, 59.0, 58.0, 57.0, 56.0, 55.0, 54.0, 53.0, 52.0, 51.0, 50.0, 49.0, 48.0, 47.0, 46.0, 45.0, 44.0, 43.0, 42.0, 41.0, 40.0, 39.0, 38.0, 37.0, 36.0, 35.0, 34.0, 33.0, 32.0, 31.0, 30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]




min_len=min(len(Si),len(Zhang),len(TaFCN),len(Our))-1

fig, ax = plt.subplots(figsize = (7, 4))
# 在生成的坐标系下画折线图
ax.plot(groud_truth[-min_len:], linewidth=1,c='black',label="Groud truth")
ax.plot(Si[-min_len:], linewidth=2,c='b',label="Si' model",linestyle='-.')
ax.plot(Zhang[-min_len:], linewidth=2,c='g',label="Zhang' model",linestyle='-.')
ax.plot(DCNN[-min_len:], linewidth=2,c='#E47833',label="DCNN",linestyle='-.')
ax.plot(TaFCN[-min_len:], linewidth=2,c='y',label="TaFCN",linestyle='-.')


ax.plot(Our[-min_len:], linewidth=2,c='r',label="Our",linestyle='-.')
# 显示图形
font1 = { 
'weight' : 'normal',
'size' : 14,
}
    
      
    #设置横纵坐标的名称以及对应字体格式
font2 = {#'family' : 'Times New Roman',
'weight' : 'normal',
'size' : 30,
}
error_rate=0.3
error_rate_1=0.8
# plt.fill_between(range(min_len), np.array(groud_truth[-min_len:])*(1+error_rate), np.array(groud_truth[-min_len:])*(1-error_rate),color="#CCCCCC",label='Error band (±{:.0%})'.format(error_rate))# color="#CCEEFF")
# plt.fill_between(range(min_len), np.array(groud_truth[-min_len:])*(1+error_rate), np.array(groud_truth[-min_len:])*(1+error_rate_1),color="#E7E7E7",label='Error band (±{:.0%})'.format(error_rate_1))# color="#CCEEFF")
# plt.fill_between(range(min_len), np.array(groud_truth[-min_len:])*(1-error_rate), np.array(groud_truth[-min_len:])*(1-error_rate_1),color="#E7E7E7")# color="#CCEEFF")
    
plt.xlabel('Number of cycle period (cycle)',font1) #X轴标签
plt.ylabel("Predicted RUL (cycle)",font1) #Y轴标签
plt.grid(alpha=0.5,linestyle='-.') #网格线，更好看
# plt.legend(loc="upper left")
plt.legend()
plt.savefig(last_last_last_path+r'\figure\by_code\prediction_rul_IGBT_3_4.eps',dpi=800,format='eps',bbox_inches = 'tight')
plt.savefig(last_last_last_path+r'\figure\by_code\prediction_rul_IGBT_3_4.png',dpi=800,format='png',bbox_inches = 'tight')
plt.show()


# Si_error=[13.0, 57.0, 48.0, 44.0, 40.0, 36.0, 32.0, 29.0, 22.0, 18.0, 28.0, 40.0, 30.0, 31.0, 26.0, 22.0, 18.0, 11.0, 10.0, 8.0, 3.0, 6.0, 17.0, 18.0, 12.0, 5.0, 24.0, 24.0, 19.0, 14.0, 11.0, 0.0, 4.0, 1.0, 22.0, 18.0, 18.0, 16.0, 14.0, 12.0, 6.0, 7.0, 5.0, 2.0, 0.0, 3.0, 21.0, 13.0, 11.0, 19.0, 23.0, 26.0, 23.0, 33.0, 37.0, 32.0, 68.0, 60.0, 66.0, 58.0, 100.0, 111.0, 73.0, 64.0, 86.0, 38.0, 41.0, 85.0, 58.0, 18.0, 53.0, 45.0, 60.0, 66.0, 78.0, 3.0]
Si_error=[13, 57, 48, 44, 40, 36, 32, 29, 22, 18, 28, 40, 30, 31, 26, 22, 18, 11, 10, 8, 3, 6, 17, 18, 12, 5, 24, 24, 19, 14, 11, 0, 4, 1, 22, 18, 18, 16, 14, 12, 6, 7, 5, 2, 0, 3, 21, 13, 11, 19, 23, 26, 23, 33, 37, 32, 68, 60, 66, 58, 100, 111, 73, 64, 86, 38, 41, 85, 58, 18, 53, 45, 60, 66, 78, 3]
Zhang_error=[64.0, 62.0, 51.0, 41.0, 39.0, 36.0, 34.0, 33.0, 32.0, 30.0, 29.0, 36.0, 47.0, 40.0, 41.0, 39.0, 38.0, 37.0, 35.0, 35.0, 35.0, 34.0, 32.0, 39.0, 40.0, 38.0, 36.0, 42.0, 42.0, 40.0, 38.0, 37.0, 35.0, 35.0, 34.0, 38.0, 36.0, 36.0, 35.0, 34.0, 33.0, 31.0, 31.0, 30.0, 28.0, 28.0, 27.0, 24.0, 24.0, 24.0, 22.0, 21.0, 20.0, 20.0, 18.0, 17.0, 17.0, 14.0, 14.0, 13.0, 12.0, 10.0, 9.0, 9.0, 9.0, 7.0, 8.0, 7.0, 5.0, 5.0, 5.0, 3.0, 2.0, 1.0, 0.0, 1.0]
        
TaFCN_error=[28.904346084594728, 29.088148498535155, 28.850256729125977, 29.03882713317871, 29.027362060546874, 28.875647354125977, 28.96324234008789, 28.948114013671876, 29.236447906494142, 29.611362075805665, 29.895995712280275, 30.18790512084961, 30.679544830322264, 31.477498245239257, 31.88624801635742, 31.549593353271483, 31.18598289489746, 31.153302955627442, 31.486330795288087, 30.10425853729248, 29.580868530273438, 28.77017765045166, 28.797579193115233, 28.786879062652588, 28.43111734390259, 27.762622356414795, 27.217262935638427, 26.64298372268677, 26.131721210479736, 25.385798168182372, 24.750729084014893, 24.0867169380188, 23.52749910354614, 23.062818431854247, 22.799000644683836, 22.57734899520874, 22.467468738555908, 22.442122745513917, 22.369387340545654, 22.09353494644165, 21.755588054656982, 21.286892795562743, 20.738014221191406, 20.22369728088379, 19.715774822235108, 19.25242805480957, 18.781087112426757, 18.280701446533204, 17.66046538352966, 16.933815145492552, 16.169437599182128, 15.302395915985107, 14.28380331993103, 13.239881658554078, 12.15295238494873, 11.084389257431031, 9.963778877258301, 8.83853440284729, 7.713970947265625, 6.5862836837768555, 5.41293683052063, 4.3293591976165775, 3.4914825916290284, 2.8876953125, 2.754207944869995, 3.096543788909912, 3.4230144023895264, 3.7711595058441163, 4.213962411880493, 4.601145696640015, 5.0251784324646, 5.370839071273804, 5.632096529006958, 5.776178312301636]
# TaFCN_error=[28.71866, 29.088146000000002, 28.840629999999997, 28.612740000000002, 28.455150000000003, 28.532111999999998, 28.77243, 28.921154, 29.236446, 29.611362, 29.895995999999997, 30.187906, 30.679544, 31.477497, 31.88625, 31.549595, 31.185984, 31.153301, 31.486332, 30.104258, 29.580868, 28.770178, 28.79758, 28.786879, 28.431118, 27.762623, 27.217264, 26.642984, 26.13172, 25.385798, 24.750729, 24.086718, 23.5275, 23.062817, 22.799, 22.57735, 22.467468, 22.442123000000002, 22.369388, 22.093534, 21.755588, 21.286893, 20.738014, 20.223697, 19.7157755, 19.252428000000002, 18.781088, 18.2807016, 17.6604652, 16.933815, 16.1694384, 15.3023963, 14.283803500000001, 13.239882, 12.1529527, 11.0843897, 9.9637785, 8.8385344, 7.713971, 6.586283, 5.412936, 4.3293586, 3.3097205, 2.3202423999999997, 1.3805246000000002, 0.4471179999999997, 0.4637184000000003, 1.3536786999999997, 2.2139626000000003, 3.0011460000000003, 3.8251786, 4.570839, 5.2320967, 5.7761784]
Our_error=[54, 49, 49, 49, 49, 45, 45, 45, 45, 49, 49, 35, 17, 10, 10, 10, 10, 10, 10, 3, 3, 3, 3, 10, 6, 10, 10, 10, 10, 10, 10, 6, 3, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20]



Si_error=[28.0, 59.0, 51.0, 47.0, 44.0, 40.0, 37.0, 35.0, 31.0, 28.0, 34.0, 42.0, 35.0, 35.0, 31.0, 29.0, 26.0, 22.0, 21.0, 20.0, 18.0, 13.0, 23.0, 24.0, 21.0, 17.0, 27.0, 26.0, 23.0, 20.0, 18.0, 12.0, 14.0, 12.0, 23.0, 20.0, 20.0, 18.0, 17.0, 15.0, 12.0, 12.0, 10.0, 7.0, 7.0, 5.0, 3.0, 0.0, 0.0, 3.0, 5.0, 7.0, 6.0, 10.0, 12.0, 11.0, 20.0, 19.0, 21.0, 20.0, 28.0, 29.0, 25.0, 24.0, 28.0, 18.0, 20.0, 30.0, 26.0, 14.0, 26.0, 24.0, 28.0, 31.0, 33.0, 11.0, 5.0, 3.0, 7.0, 7.0, 5.0, 4.0, 2.0, 20.0, 13.0, 0.0]

Zhang_error=[71.0, 69.0, 42.0, 30.0, 27.0, 25.0, 22.0, 21.0, 20.0, 18.0, 17.0, 26.0, 38.0, 31.0, 32.0, 30.0, 29.0, 28.0, 26.0, 26.0, 26.0, 25.0, 23.0, 32.0, 33.0, 31.0, 29.0, 37.0, 37.0, 35.0, 33.0, 32.0, 29.0, 30.0, 29.0, 36.0, 34.0, 34.0, 33.0, 32.0, 31.0, 29.0, 29.0, 28.0, 26.0, 26.0, 25.0, 22.0, 22.0, 22.0, 20.0, 19.0, 18.0, 18.0, 16.0, 15.0, 15.0, 12.0, 12.0, 11.0, 10.0, 8.0, 7.0, 7.0, 7.0, 5.0, 8.0, 7.0, 3.0, 4.0, 7.0, 3.0, 3.0, 1.0, 0.0, 2.0, 4.0, 5.0, 5.0, 6.0, 3.0, 4.0, 3.0, 2.0, 4.0, 2.0]
        
TaFCN_error=[28.96772880554199, 29.194879150390626, 28.966249465942383, 29.15835647583008, 29.13464698791504, 29.041773986816406, 29.105652236938475, 29.073262405395507, 29.35464210510254, 29.708401107788085, 30.01438217163086, 30.35292854309082, 30.872076416015624, 31.675856399536134, 32.065272903442384, 31.670408248901367, 31.262058448791503, 31.254939079284668, 31.470988464355468, 30.11743507385254, 29.572300910949707, 28.748418045043945, 28.723702430725098, 28.706149959564208, 28.372809314727782, 27.642030429840087, 27.07886266708374, 26.617309093475342, 26.159684276580812, 25.395871257781984, 24.736073780059815, 24.04347105026245, 23.496433162689208, 23.01993246078491, 22.762042903900145, 22.580413150787354, 22.51628370285034, 22.53172674179077, 22.455554294586182, 22.2127724647522, 21.84220199584961, 21.341492938995362, 20.775057792663574, 20.239649295806885, 19.6882532119751, 19.146550273895265, 18.648596000671386, 18.123530387878418, 17.51659712791443, 16.840631437301635, 16.108535957336425, 15.27419695854187, 14.25238585472107, 13.215874862670898, 12.126171779632568, 11.054502153396607, 9.927595043182373, 8.80360131263733, 7.668699455261231, 6.536226558685303, 5.372620534896851, 4.2964949131011965, 3.4676616191864014, 2.871809387207031, 2.748372507095337, 3.0800405502319337, 3.4029272556304933, 3.733441686630249, 4.177246809005737, 4.5668517589569095, 5.004735660552979, 5.35260796546936, 5.630285406112671, 5.797471189498902]
#TaFCN_error=[28.71866, 29.088146000000002, 28.840629999999997, 28.612740000000002, 28.455150000000003, 28.532111999999998, 28.77243, 28.921154, 29.236446, 29.611362, 29.895995999999997, 30.187906, 30.679544, 31.477497, 31.88625, 31.549595, 31.185984, 31.153301, 31.486332, 30.104258, 29.580868, 28.770178, 28.79758, 28.786879, 28.431118, 27.762623, 27.217264, 26.642984, 26.13172, 25.385798, 24.750729, 24.086718, 23.5275, 23.062817, 22.799, 22.57735, 22.467468, 22.442123000000002, 22.369388, 22.093534, 21.755588, 21.286893, 20.738014, 20.223697, 19.7157755, 19.252428000000002, 18.781088, 18.2807016, 17.6604652, 16.933815, 16.1694384, 15.3023963, 14.283803500000001, 13.239882, 12.1529527, 11.0843897, 9.9637785, 8.8385344, 7.713971, 6.586283, 5.412936, 4.3293586, 3.3097205, 2.3202423999999997, 1.3805246000000002, 0.4471179999999997, 0.4637184000000003, 1.3536786999999997, 2.2139626000000003, 3.0011460000000003, 3.8251786, 4.570839, 5.2320967, 5.7761784]

DCNN_error=[19.706673431396485, 18.69141082763672, 18.742241668701173, 19.131729125976562, 19.482498931884766, 19.842776489257812, 20.217630004882814, 20.544860076904296, 20.439202880859376, 19.786754608154297, 19.90674819946289, 20.159110260009765, 20.843572235107423, 21.642693328857423, 22.45408477783203, 23.287371826171874, 23.97888946533203, 24.528590393066406, 24.62757263183594, 24.012812042236327, 23.168506240844728, 22.34632453918457, 21.81985740661621, 21.601093292236328, 21.184711837768553, 20.955782318115233, 20.937101364135742, 20.879124450683594, 20.765622711181642, 20.759026336669923, 20.67622604370117, 20.545381546020508, 19.909970855712892, 19.411648178100585, 19.061442184448243, 18.871609497070313, 18.981203079223633, 19.21019287109375, 19.466893577575682, 19.50533256530762, 19.391082763671875, 19.352335739135743, 19.142323112487794, 18.77566776275635, 18.40163860321045, 17.903476905822753, 17.344732666015624, 16.83915195465088, 16.306385898590086, 15.77300386428833, 14.995925617218017, 14.114577579498292, 13.098907279968262, 12.019569969177246, 11.098571586608887, 10.099530887603759, 9.089752578735352, 8.010833835601806, 6.984987735748291, 5.943381023406983, 4.763111114501953, 3.5580615997314453, 2.42972469329834, 1.4623234748840332, 0.7683503150939941, 1.0971601486206055, 2.071548843383789, 3.237994575500488, 4.09615421295166, 4.9860025405883786, 5.719962692260742, 6.331375503540039, 6.945025062561035, 7.982028770446777]    


Our_error=[59, 55, 55, 45, 45, 45, 45, 40, 40, 45, 55, 20, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]

# min_len=min(len(Si),len(Zhang),len(TaFCN),len(Our))

fig, ax = plt.subplots(figsize = (7, 4))
# 在生成的坐标系下画折线图

ax.plot(np.arange(min_len,0,-1),Si_error[-min_len:], linewidth=2,c='b',label="Si' model",linestyle='--')
ax.plot(np.arange(min_len,0,-1),Zhang_error[-min_len:], linewidth=2,c='g',label="Zhang' model",linestyle='--')
ax.plot(np.arange(min_len,0,-1),DCNN_error[-min_len:], linewidth=2,c='#E47833',label="DCNN",linestyle='--')
ax.plot(np.arange(min_len,0,-1),TaFCN_error[-min_len:], linewidth=2,c='y',label="TaFCN",linestyle='--')
ax.plot(np.arange(min_len,0,-1),Our_error[-min_len:], linewidth=2,c='r',label="Our",linestyle='--')
# ax.plot(groud_truth[-min_len:], linewidth=1,c='black',label="Groud truth")


def rmse(x):
    s=0
    for i in x:
        s+=i*i
    r=sqrt(s/len(x))
    return r

def aae(x):
    return np.mean(x)


def score(Y_test,Y_pred) :
      
    s=0    
    for i in range(len(Y_pred)):
        if Y_pred[i]>Y_test[i]:
            s=s+math.exp((Y_pred[i]-Y_test[i])/10)-1
        else:
            s=s+math.exp((Y_test[i]-Y_pred[i])/13)-1    
    # print('unbalanced_penalty_score{}'.format(s))
    return s  
  
def error_range(Y_test,Y_pred) : 
    Y_test =np.array(Y_test)  
    Y_pred =np.array(Y_pred) 
     
    error_range=(Y_test-Y_pred).min(),(Y_test-Y_pred).max()
    # print('error range{}'.format(error_range))
    return error_range

        
def error_list(Y_test,Y_pred) : 
    Y_test =np.array(Y_test)  
    Y_pred =np.array(Y_pred) 

    error_list=Y_test-Y_pred
    # Y_test =np.array(Y_test)  
    # Y_pred =np.array(Y_pred) 
     
    # error_range=(Y_test-Y_pred).min(),(Y_test-Y_pred).max()
    # print('error range{}'.format(error_range))
    return list(error_list)



# def predcition(targets,predictions):
#     targets=np.array(targets)
#     predictions=np.array(predictions)

#     smape = (1 / len(predictions)) * np.sum(2 * np.abs(predictions - targets) / (np.abs(predictions) + np.abs(targets))) * 100
    
#     return 100-smape

def predcition(targets,predictions):
    targets=np.array(targets)
    predictions=np.array(predictions)
    
    
    # targets=np.array(targets)
    # predictions=np.array(predictions)

    

    smape = np.sum( np.abs(predictions - targets)) /np.sum( np.abs( targets)) * 100
    print(np.sum( np.abs(predictions - targets)))
    
    print(np.sum( np.abs( targets)))
    
    print(smape)
    y=100-smape
    
    # print(y)
    return y   

print(list((error_list(groud_truth[-min_len:],Si[-min_len:]),error_list(groud_truth[-min_len:],Zhang[-min_len:]),error_list(groud_truth[-min_len:],DCNN[-min_len:]),error_list(groud_truth[-min_len:],TaFCN[-min_len:]),error_list(groud_truth[-min_len:],Our[-min_len:]))))
        
print(list((rmse(Si_error[-min_len:]),rmse(Zhang_error[-min_len:]),rmse(DCNN_error[-min_len:]),rmse(TaFCN_error[-min_len:]),rmse(Our_error[-min_len:]))))
print(list((aae(Si_error[-min_len:]),aae(Zhang_error[-min_len:]),aae(DCNN_error[-min_len:]),aae(TaFCN_error[-min_len:]),aae(Our_error[-min_len:]))))
print(list((score(groud_truth[-min_len:],Si[-min_len:]),score(groud_truth[-min_len:],Zhang[-min_len:]),score(groud_truth[-min_len:],DCNN[-min_len:]),score(groud_truth[-min_len:],TaFCN[-min_len:]),score(groud_truth[-min_len:],Our[-min_len:]))))
print(list((error_range(groud_truth[-min_len:],Si[-min_len:]),error_range(groud_truth[-min_len:],Zhang[-min_len:]),error_range(groud_truth[-min_len:],DCNN[-min_len:]),error_range(groud_truth[-min_len:],TaFCN[-min_len:]),error_range(groud_truth[-min_len:],Our[-min_len:]))))





print(list((predcition(groud_truth[-min_len:],Si[-min_len:]),predcition(groud_truth[-min_len:],Zhang[-min_len:]),predcition(groud_truth[-min_len:],DCNN[-min_len:]),predcition(groud_truth[-min_len:],TaFCN[-min_len:]),predcition(groud_truth[-min_len:],Our[-min_len:]))))

# print
# 显示图形
font1 = { 
'weight' : 'normal',
'size' : 14,
}
    
      
    #设置横纵坐标的名称以及对应字体格式
font2 = {#'family' : 'Times New Roman',
'weight' : 'normal',
'size' : 30,
}
# error_rate=0.2
# plt.fill_between(np.arange(min_len,0,-1), np.array(np.arange(min_len,0,-1))*(error_rate), np.arange(min_len,0,-1)*0,color="#CCCCCC")# color="#CCEEFF")
plt.fill_between(np.arange(min_len,0,-1), np.array(np.arange(min_len,0,-1))*(error_rate), np.arange(min_len,0,-1)*0,color="#CCCCCC",label='Error band (±{:.0%})'.format(error_rate))# color="#CCEEFF")
plt.fill_between(np.arange(min_len,0,-1), np.array(np.arange(min_len,0,-1))*(error_rate), np.array(np.arange(min_len,0,-1))*(error_rate_1),color="#E7E7E7",label='Error band (±{:.0%})'.format(error_rate_1))# color="#CCEEFF")    
plt.xlabel('Actual RUL (cycle)',font1) #X轴标签
plt.ylabel("Absolute prediction error (cycle)",font1) #Y轴标签
plt.grid(alpha=0.5,linestyle='-.') #网格线，更好看
plt.gca().invert_xaxis()
plt.legend()
plt.savefig(last_last_last_path+r'\figure\by_code\The_absolute_error_of_predicted_RUL_IGBT_3_4.eps',dpi=800,format='eps',bbox_inches = 'tight')
plt.savefig(last_last_last_path+r'\figure\by_code\The_absolute_error_of_predicted_RUL_IGBT_3_4.png',dpi=800,format='png',bbox_inches = 'tight')
plt.show()


