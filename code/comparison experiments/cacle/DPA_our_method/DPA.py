# -*- coding: utf-8 -*-
"""
Created on Mon Mar 20 16:46:05 2023

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Sun Mar 19 22:07:49 2023

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Sun Mar 19 20:41:41 2023

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Sat Mar 18 13:04:56 2023

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Mon Aug  1 16:49:17 2022

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Mon Aug  1 16:26:02 2022

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Mon Aug  1 14:28:22 2022

@author: Administrator
"""
# -*- coding: utf-8 -*-
"""
Created on Sun Jul 31 18:17:31 2022

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Sat Jul 30 14:50:53 2022

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Thu Jul 28 14:55:56 2022

@author: Administrator

"""



import xlrd

import matplotlib.pyplot as plt

import numpy as np

from scipy.optimize import minimize, rosen, rosen_der

from scipy.stats import linregress


shed=-0.5

import numpy as np
import pandas as pd
import os
import pickle
import scipy as sp
import datetime
print(os.path.abspath(os.path.join(os.getcwd(), "../..")))
last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../.."))

print(os.path.abspath(os.path.join(os.getcwd(), "..")))
last_path=os.path.abspath(os.path.join(os.getcwd(), ".."))

print(os.path.abspath(os.path.join(os.getcwd(), "../../..")))
last_last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../../.."))


print(os.path.abspath(os.path.join(os.getcwd(), "../../../..")))
last_last_last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../../../.."))





def get_data_list():
    worksheet = xlrd.open_workbook(last_last_last_last_path+r'\dataset\CACLE\CS2_35_cap_dropOutlier.xlsx')
    sheet_names= worksheet.sheet_names()
    print(sheet_names)
    CS2_35=[]
    for sheet_name in sheet_names:
        sheet = worksheet.sheet_by_name(sheet_name)
        rows = sheet.nrows # 获取行数
        cols = sheet.ncols # 获取列数，尽管没用到
        all_content = []
    
    
        CS2_35 = sheet.col_values(0) # 获取第二列内容， 数据格式为此数据的原有格式（原：字符串，读取：字符串；  原：浮点数， 读取：浮点数）


    worksheet = xlrd.open_workbook(last_last_last_last_path+r'\dataset\CACLE\CS2_36_cap_dropOutlier.xlsx')
    sheet_names= worksheet.sheet_names()
    print(sheet_names)
    CS2_36=[]
    for sheet_name in sheet_names:
        sheet = worksheet.sheet_by_name(sheet_name)
        rows = sheet.nrows # 获取行数
        cols = sheet.ncols # 获取列数，尽管没用到
        all_content = []
    
    
        CS2_36 = sheet.col_values(0) # 获取第二列内容， 数据格式为此数据的原有格式（原：字符串，读取：字符串；  原：浮点数， 读取：浮点数）
        
    worksheet = xlrd.open_workbook(last_last_last_last_path+r'\dataset\CACLE\CS2_37_cap_dropOutlier.xlsx')
    sheet_names= worksheet.sheet_names()
    print(sheet_names)
    CS2_37=[]
    for sheet_name in sheet_names:
        sheet = worksheet.sheet_by_name(sheet_name)
        rows = sheet.nrows # 获取行数
        cols = sheet.ncols # 获取列数，尽管没用到
        all_content = []
    
    
        CS2_37 = sheet.col_values(0) # 获取第二列内容， 数据格式为此数据的原有格式（原：字符串，读取：字符串；  原：浮点数， 读取：浮点数）
        
        
    worksheet = xlrd.open_workbook(last_last_last_last_path+r'\dataset\CACLE\CS2_38_cap_dropOutlier.xlsx')
    sheet_names= worksheet.sheet_names()
    print(sheet_names)
    CS2_38=[]
    for sheet_name in sheet_names:
        sheet = worksheet.sheet_by_name(sheet_name)
        rows = sheet.nrows # 获取行数
        cols = sheet.ncols # 获取列数，尽管没用到
        all_content = []
    
    
        CS2_38 = sheet.col_values(0) # 获取第二列内容， 数据格式为此数据的原有格式（原：字符串，读取：字符串；  原：浮点数， 读取：浮点数）
        
        



    fig, ax = plt.subplots()
    # 在生成的坐标系下画折线图
    ax.plot(CS2_35, linewidth=1,c='b',label="CS2_35")
    ax.plot(CS2_36, linewidth=1,c='g',label="CS2_36")
    ax.plot(CS2_37, linewidth=1,c='y',label="CS2_37")
    ax.plot(CS2_38, linewidth=1,c='r',label="CS2_38")

    # 显示图形
    font1 = { 
    'weight' : 'normal',
    'size' : 14,
    }
        
          
        #设置横纵坐标的名称以及对应字体格式
    font2 = {#'family' : 'Times New Roman',
    'weight' : 'normal',
    'size' : 30,
    }
        
    plt.xlabel('Cycle',font1) #X轴标签
    plt.ylabel("Capacity (Ah)",font1) #Y轴标签
    plt.legend()
    plt.savefig(last_last_last_last_path+r'\figure\by_code\Dataset_cycle_curves_comparision.eps',dpi=800,format='eps',bbox_inches = 'tight')
    plt.savefig(last_last_last_last_path+r'\figure\by_code\Dataset_cycle_curves_comparision.png',dpi=800,format='png',bbox_inches = 'tight')
    plt.show()
    
    return CS2_35,CS2_36,CS2_37,CS2_38
CS2_35,CS2_36,CS2_37,CS2_38=get_data_list()


print(CS2_35)

CS2_35=list(np.array(CS2_35)-CS2_35[0])
CS2_36=list(np.array(CS2_36)-CS2_36[0])
CS2_37=list(np.array(CS2_37)-CS2_37[0])
CS2_38=list(np.array(CS2_38)-CS2_38[0])

print(CS2_35)


print(CS2_35[0])
print(CS2_36[0])
print(CS2_37[0])
print(CS2_38[0])

def get_health_list(CS2_35,shed):
    for i in range(len(CS2_35)):
        if CS2_35[i]<shed:                           ########################################   小于门槛值
            CS235=CS2_35[0:i]
            return CS235



def get_input_out(CS235,CS237,CS236):
    min_len=min(len(CS235),len(CS236),len(CS237))
    
    input_list=[]
    output_list=[]
    
    true_out_list=[]
    
    CS235_health=get_health_list(CS235,shed) 
    CS237_health=get_health_list(CS237,shed) 
    CS236_health=get_health_list(CS236,shed) 
    # CS238=get_health_list(CS2_38,shed)  
    # print(len(CS236_health))   
    
    # print(min(len(CS235),len(CS236),len(CS237)))
    
    # print("ccccccccccccccccccccccccc")
    
    
    
    for i in range(2,len(CS236_health)):

        
        
        
        # one_input.append(np.array([len(CS235_health),len(CS237_health)]))
        
        








        y = [CS235[0], CS235[min_len-1]]
        x = [0, (min_len-1)*(min_len-1)]
        slope_0, intercept_0, r_value, p_value, std_err = linregress(x, y)

        
        y = [CS237[0], CS237[min_len-1]]
        x = [0,(min_len-1)*(min_len-1)]
        slope_1, intercept_1, r_value, p_value, std_err = linregress(x, y)
        
        
        
        
        
        

        one_input=[]
        one_input.append(np.array(CS235[:i]))
        one_input.append(np.array(CS237[:i]))
        
        one_input.append("CS238")
    
        min_len_train=min(len(CS235),len(CS237))
            
        one_input.append(np.array(CS235[:min_len_train]))
            
      
        one_input.append(np.array(CS237[:min_len_train]))
        
        one_input.append(np.array(CS236[:i]))
        
        
        
        
        
        input_list.append(one_input)
        
        one_out=[]
        one_out.append(np.array(CS236[:i]))
        
        output_list.append(one_out)
        
        true_out_list.append(max(len(CS236_health)-i-1,0))





    
    true_out_array=np.array(true_out_list)
    return input_list[:len(CS236_health)],output_list[:len(CS236_health)],true_out_array[:len(CS236_health)]






for i in range(1):
    
    

        
    if i==0:
        
        input_list,output_list,true_out_array=get_input_out(CS2_35,CS2_36,CS2_38)


   
    
    rul_pred_list=[]
    
    regress_error_list=[]
    
    for j in range(len(input_list)):
        
        # print(j)
        # print("jjjjjjjjjjjjjjjjjjjjjjjjjj")
        index=j
        def objective(x):
            
            integrate_array=input_list[index][0]*x[0]+input_list[index][1]*x[1]+x[2]
            
            error = np.sum(np.square(integrate_array - output_list[index][0]))/len(integrate_array)
            
            return error    
        


        
        x0=np.ones(3)
        x0[2]=0
 
        
        

        # sol = minimize(objective, x0 ) 
        sol = minimize(objective, x0 ,method='BFGS', options={'maxiter':(2+1)*200,'gtol':1e-5 }  )
        
        u1=sol.x[0] 
        u2=sol.x[1]
        c1=input_list[j][3]

        c2=input_list[j][4]
        
        offset_vertical=sol.x[2]




        
        ######补偿误差
        pred_online_cruve=u1*input_list[j][0] +u2*input_list[j][1] +offset_vertical
        pred_curve=u1*c1+u2*c2  + offset_vertical +      np.mean((input_list[j][5] - pred_online_cruve)[int(-min(j*0.2,20)):] )      


#############预测曲线          
        # plt.plot(range(len(pred_curve)), pred_curve)
        # plt.show()
 
#############

        
        ful_pred=len(pred_curve)
        for ii in range(len(pred_curve)):
            
            # if i == len(pred_curve)-1:
                
            #     ful_pred==i
            
            if pred_curve[ii]<shed:
                
                ful_pred=ii
                
                break


        rul_pred_list.append(ful_pred-j-1) #######(-1  because of  begining from 2)





#############实时的拟合曲线与实际曲线的所有点的误差        
        # pred_online_cruve=u1*input_list[j][0] +u2*input_list[j][1]                
        # plt.plot(range(len(input_list[j][5])), input_list[j][5] - pred_online_cruve)
        # plt.show()

#################


                
    
    rul_pred_array=np.array(rul_pred_list)
    
    error_pred_array=rul_pred_array-true_out_array
    
    error_pred_array=np.maximum(error_pred_array, -error_pred_array)
        # print(sol.x)
        
    # print(error_pred_array.sum())
    # print("xxxxx")
    # print(error_pred_array)
        
        
    fig, ax = plt.subplots()
    # 在生成的坐标系下画折线图
    ax.plot(error_pred_array, linewidth=1)
    
    
    
    # 显示图形
    plt.show()   
     
    
    print(i)
    print("rul_pred_array") 
    print(list(rul_pred_array))
    print("true_out_array") 
    print(list(true_out_array))
    print("error_pred_array") 
    print(list(error_pred_array))    





# 0
# rul_pred_array
# [849, 847, 846, 845, 844, 752, 727, 724, 723, 722, 721, 720, 721, 720, 719, 719, 718, 721, 720, 719, 718, 717, 716, 716, 715, 714, 717, 716, 713, 710, 709, 708, 706, 708, 707, 704, 703, 702, 700, 699, 700, 699, 697, 696, 695, 693, 692, 692, 691, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 671, 670, 669, 668, 666, 665, 664, 663, 662, 661, 660, 657, 656, 655, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 644, 643, 646, 645, 644, 643, 637, 636, 635, 634, 633, 633, 636, 630, 629, 618, 613, 612, 611, 610, 609, 608, 607, 606, 599, 598, 603, 602, 601, 600, 599, 593, 591, 590, 589, 588, 587, 586, 585, 584, 582, 581, 580, 579, 579, 578, 576, 576, 580, 580, 579, 578, 577, 575, 574, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 563, 562, 561, 560, 559, 558, 557, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 520, 518, 517, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 387, 386, 385, 384, 383, 382, 382, 381, 381, 380, 379, 378, 379, 378, 382, 382, 381, 380, 379, 378, 376, 375, 375, 373, 368, 366, 365, 364, 363, 362, 361, 360, 357, 356, 355, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 342, 341, 340, 339, 338, 337, 337, 336, 335, 334, 333, 333, 332, 331, 332, 331, 330, 330, 333, 333, 332, 331, 330, 329, 328, 327, 326, 324, 324, 322, 321, 316, 315, 313, 312, 311, 310, 309, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 298, 297, 296, 295, 294, 293, 293, 296, 296, 295, 294, 293, 292, 292, 292, 291, 290, 290, 289, 288, 288, 287, 292, 291, 292, 293, 292, 291, 290, 289, 289, 288, 287, 286, 285, 284, 283, 282, 282, 281, 280, 279, 277, 276, 276, 275, 274, 273, 273, 273, 272, 271, 271, 271, 270, 285, 285, 284, 284, 283, 284, 283, 286, 286, 285, 295, 294, 293, 292, 291, 290, 289, 288, 287, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 262, 261, 261, 260, 260, 259, 259, 258, 258, 258, 262, 261, 260, 260, 259, 258, 257, 256, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 216, 215, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 204, 203, 202, 201, 199, 198, 197, 196, 195, 193, 192, 191, 190, 189, 186, 182, 181, 180, 178, 177, 176, 176, 174, 173, 171, 170, 169, 168, 166, 165, 164, 163, 161, 160, 158, 157, 156, 155, 154, 153, 152, 150, 149, 149, 148, 147, 147, 147, 146, 146, 146, 149, 150, 150, 149, 149, 149, 156, 155, 155, 155, 157, 156, 155, 155, 154, 153, 152, 152, 151, 150, 149, 148, 147, 146, 144, 143, 142, 141, 140, 138, 137, 136, 132, 130, 129, 128, 127, 125, 119, 115, 114, 113, 111, 110, 109, 108, 107, 106, 105, 105, 104, 103, 102, 101, 102, 102, 105, 105, 104, 103, 103, 102, 101, 101, 100, 99, 98, 97, 96, 95, 97, 96, 95, 94, 93, 92, 92, 92, 91, 91, 90, 89, 89, 89, 89, 90, 89, 89, 88, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 80, 79, 79, 79, 79, 78, 77, 76, 76, 75, 75, 76, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 62, 54, 61, 60, 59, 58, 57, 56, 55, 54, 53, 51, 42, 40, 39, 38, 36, 35, 33, 32, 31, 30, 27, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 14]
# true_out_array
# [820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
# error_pred_array
# [29, 28, 28, 28, 28, 63, 87, 89, 89, 89, 89, 89, 87, 87, 87, 86, 86, 82, 82, 82, 82, 82, 82, 81, 81, 81, 77, 77, 79, 81, 81, 81, 82, 79, 79, 81, 81, 81, 82, 82, 80, 80, 81, 81, 81, 82, 82, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 89, 89, 89, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 86, 86, 82, 82, 82, 82, 87, 87, 87, 87, 87, 86, 82, 87, 87, 97, 101, 101, 101, 101, 101, 101, 101, 101, 107, 107, 101, 101, 101, 101, 101, 106, 107, 107, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 107, 107, 108, 107, 102, 101, 101, 101, 101, 102, 102, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 100, 100, 100, 100, 100, 100, 100, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 96, 97, 97, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 91, 91, 91, 91, 91, 91, 90, 90, 89, 89, 89, 89, 87, 87, 82, 81, 81, 81, 81, 81, 82, 82, 81, 82, 86, 87, 87, 87, 87, 87, 87, 87, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 90, 90, 90, 90, 90, 89, 89, 89, 87, 87, 87, 86, 82, 81, 81, 81, 81, 81, 81, 81, 81, 82, 81, 82, 82, 86, 86, 87, 87, 87, 87, 87, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 87, 87, 87, 87, 87, 87, 86, 82, 81, 81, 81, 81, 81, 80, 79, 79, 79, 78, 78, 78, 77, 77, 71, 71, 69, 67, 67, 67, 67, 67, 66, 66, 66, 66, 66, 66, 66, 66, 65, 65, 65, 65, 66, 66, 65, 65, 65, 65, 64, 63, 63, 63, 62, 61, 61, 45, 44, 44, 43, 43, 41, 41, 37, 36, 36, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 22, 22, 21, 21, 20, 20, 19, 18, 13, 13, 13, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 15, 18, 18, 18, 19, 19, 19, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 23, 23, 23, 22, 21, 21, 20, 19, 15, 13, 12, 12, 11, 10, 2, 2, 1, 0, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 0, 1, 1, 1, 1, 2, 7, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 8, 7, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 8, 9, 11, 11, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 16, 17, 18, 18, 18, 18, 19, 19, 20, 22, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 29, 22, 30, 30, 30, 30, 30, 30, 30, 30, 30, 29, 21, 20, 20, 20, 19, 19, 18, 18, 18, 18, 16, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14]
# 1
# rul_pred_array
# [848, 847, 846, 845, 844, 770, 728, 724, 723, 721, 723, 723, 726, 726, 726, 726, 726, 726, 725, 730, 729, 728, 727, 728, 727, 726, 717, 713, 711, 709, 708, 707, 706, 701, 699, 696, 695, 694, 693, 694, 691, 690, 689, 688, 687, 686, 685, 684, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 663, 662, 662, 660, 659, 658, 657, 656, 655, 655, 654, 653, 652, 652, 651, 650, 649, 650, 649, 648, 647, 647, 646, 645, 648, 642, 641, 640, 639, 643, 642, 641, 641, 640, 639, 638, 637, 635, 609, 618, 617, 613, 612, 610, 609, 608, 607, 607, 606, 604, 603, 602, 601, 600, 599, 599, 598, 597, 596, 595, 594, 593, 592, 594, 593, 592, 591, 590, 589, 588, 587, 583, 582, 581, 580, 582, 581, 577, 576, 578, 574, 573, 572, 571, 570, 569, 568, 566, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 554, 553, 552, 551, 550, 549, 548, 547, 547, 545, 544, 544, 543, 542, 541, 540, 538, 537, 537, 536, 535, 534, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 523, 522, 520, 520, 519, 518, 517, 516, 518, 514, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 498, 497, 496, 495, 494, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 412, 411, 410, 409, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 381, 380, 379, 378, 377, 380, 379, 378, 377, 376, 375, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 335, 338, 337, 336, 335, 334, 333, 332, 331, 331, 330, 329, 328, 327, 326, 325, 325, 324, 323, 323, 322, 320, 319, 318, 317, 316, 315, 314, 313, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 293, 292, 291, 290, 289, 289, 288, 287, 288, 287, 286, 286, 289, 288, 288, 287, 286, 285, 284, 285, 285, 285, 284, 289, 288, 287, 286, 285, 284, 285, 284, 284, 284, 283, 283, 282, 281, 280, 279, 278, 277, 276, 275, 275, 274, 273, 272, 272, 272, 271, 271, 271, 270, 285, 284, 283, 283, 283, 283, 283, 286, 286, 285, 295, 294, 293, 292, 292, 291, 290, 289, 288, 287, 286, 285, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 272, 272, 271, 270, 269, 268, 267, 266, 266, 265, 265, 264, 264, 264, 264, 263, 265, 266, 266, 265, 264, 264, 264, 263, 270, 269, 268, 268, 267, 266, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 252, 251, 250, 249, 248, 247, 246, 244, 243, 242, 241, 240, 239, 238, 238, 237, 236, 236, 235, 236, 235, 234, 233, 232, 231, 231, 230, 230, 229, 229, 229, 228, 227, 226, 225, 224, 222, 221, 219, 218, 216, 215, 214, 213, 211, 210, 209, 208, 207, 206, 203, 202, 201, 199, 198, 197, 196, 194, 193, 192, 191, 190, 189, 188, 187, 186, 177, 176, 175, 174, 172, 172, 171, 170, 168, 167, 166, 164, 163, 163, 163, 162, 169, 168, 168, 170, 169, 169, 170, 171, 171, 173, 172, 172, 173, 172, 171, 171, 171, 170, 169, 169, 169, 168, 167, 168, 167, 166, 165, 164, 163, 162, 161, 160, 160, 158, 157, 156, 155, 154, 153, 151, 150, 149, 147, 146, 145, 144, 143, 142, 141, 139, 138, 137, 136, 135, 135, 134, 133, 132, 131, 130, 129, 128, 128, 127, 127, 126, 125, 124, 123, 122, 121, 120, 119, 119, 126, 126, 125, 124, 123, 122, 121, 121, 122, 121, 123, 129, 129, 128, 128, 127, 128, 129, 136, 135, 136, 135, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 71, 68, 67, 57, 55, 53, 52, 50, 49, 48, 46, 44, 34, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 23, 24, 23, 30, 30, 31, 32, 41, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6]
# true_out_array
# [874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
# error_pred_array
# [26, 26, 26, 26, 26, 99, 140, 143, 143, 144, 141, 140, 136, 135, 134, 133, 132, 131, 131, 125, 125, 125, 125, 123, 123, 123, 131, 134, 135, 136, 136, 136, 136, 140, 141, 143, 143, 143, 143, 141, 143, 143, 143, 143, 143, 143, 143, 143, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 145, 145, 144, 145, 145, 145, 145, 145, 145, 144, 144, 144, 144, 143, 143, 143, 143, 141, 141, 141, 141, 140, 140, 140, 136, 141, 141, 141, 141, 136, 136, 136, 135, 135, 135, 135, 135, 136, 161, 151, 151, 154, 154, 155, 155, 155, 155, 154, 154, 155, 155, 155, 155, 155, 155, 154, 154, 154, 154, 154, 154, 154, 154, 151, 151, 151, 151, 151, 151, 151, 151, 154, 154, 154, 154, 151, 151, 154, 154, 151, 154, 154, 154, 154, 154, 154, 154, 155, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 155, 155, 155, 155, 155, 155, 155, 155, 154, 155, 155, 154, 154, 154, 154, 154, 155, 155, 154, 154, 154, 154, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 154, 154, 155, 154, 154, 154, 154, 154, 151, 154, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 154, 154, 154, 154, 154, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 150, 150, 150, 150, 150, 146, 146, 146, 146, 146, 146, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 150, 146, 146, 146, 146, 146, 146, 146, 146, 145, 145, 145, 145, 145, 145, 145, 144, 144, 144, 143, 143, 144, 144, 144, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 144, 144, 144, 144, 144, 143, 143, 143, 141, 141, 141, 140, 136, 136, 135, 135, 135, 135, 135, 133, 132, 131, 131, 125, 125, 125, 125, 125, 125, 123, 123, 122, 121, 121, 120, 120, 120, 120, 120, 120, 120, 120, 120, 119, 119, 119, 119, 118, 117, 117, 116, 115, 115, 99, 99, 99, 98, 97, 96, 95, 91, 90, 90, 79, 79, 79, 79, 78, 78, 78, 78, 78, 78, 78, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 77, 77, 77, 77, 77, 77, 77, 76, 76, 75, 75, 74, 73, 72, 72, 69, 67, 66, 66, 66, 65, 64, 64, 56, 56, 56, 55, 55, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 55, 55, 55, 54, 54, 52, 52, 52, 52, 52, 52, 51, 51, 50, 50, 49, 48, 48, 48, 48, 48, 48, 49, 49, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 54, 54, 54, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 64, 64, 64, 64, 65, 64, 64, 64, 65, 65, 65, 66, 66, 65, 64, 64, 56, 56, 55, 52, 52, 51, 49, 47, 46, 43, 43, 42, 40, 40, 40, 39, 38, 38, 38, 37, 36, 36, 36, 34, 34, 34, 34, 34, 34, 34, 34, 34, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 36, 36, 36, 36, 36, 36, 36, 36, 35, 35, 34, 34, 34, 34, 34, 34, 34, 34, 34, 33, 25, 24, 24, 24, 24, 24, 24, 23, 21, 21, 18, 11, 10, 10, 9, 9, 7, 5, 3, 3, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 3, 3, 6, 7, 8, 8, 9, 9, 9, 10, 11, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 18, 18, 10, 9, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]     
