# -*- coding: utf-8 -*-
"""
Created on Wed Mar 22 16:37:59 2023

@author: Administrator
"""

import xlrd

import matplotlib.pyplot as plt

import numpy as np

from scipy.optimize import minimize, rosen, rosen_der

from scipy.stats import linregress


shed=-0.5

import numpy as np
import pandas as pd
import os
import pickle
import scipy as sp
import datetime
print(os.path.abspath(os.path.join(os.getcwd(), "../..")))
last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../.."))

print(os.path.abspath(os.path.join(os.getcwd(), "..")))
last_path=os.path.abspath(os.path.join(os.getcwd(), ".."))

print(os.path.abspath(os.path.join(os.getcwd(), "../../..")))
last_last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../../.."))


print(os.path.abspath(os.path.join(os.getcwd(), "../../../..")))
last_last_last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../../../.."))


# print(os.path.abspath(os.path.join(os.getcwd(), "../../../")))
# last_last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../../.."))
# def get_data_list(CS2_35_cap_dropOutlier):
#     worksheet = xlrd.open_workbook('F:\桌面11.17\project\RUL_guassion\handled_dataset\CACLE\{}.xlsx'.format(CS2_35_cap_dropOutlier))
#     sheet_names= worksheet.sheet_names()
#     print(sheet_names)
#     CS2_35=[]
#     for sheet_name in sheet_names:
#         sheet = worksheet.sheet_by_name(sheet_name)
#         rows = sheet.nrows # 获取行数
#         cols = sheet.ncols # 获取列数，尽管没用到
#         all_content = []
    
    
#         CS2_35 = sheet.col_values(0) # 获取第二列内容， 数据格式为此数据的原有格式（原：字符串，读取：字符串；  原：浮点数， 读取：浮点数）



#     fig, ax = plt.subplots()
#     # 在生成的坐标系下画折线图
#     ax.plot(CS2_35, linewidth=1)
#     # 显示图形
#     plt.show()
    
#     return CS2_35

# CS2_35=get_data_list("CS2_35_cap_dropOutlier")
# CS2_36=get_data_list("CS2_36_cap_dropOutlier")
# CS2_37=get_data_list("CS2_37_cap_dropOutlier")
# CS2_38=get_data_list("CS2_38_cap_dropOutlier")


def get_data_list():
    worksheet = xlrd.open_workbook(last_last_last_last_path+r'\dataset\CACLE\CS2_35_cap_dropOutlier.xlsx')
    sheet_names= worksheet.sheet_names()
    print(sheet_names)
    CS2_35=[]
    for sheet_name in sheet_names:
        sheet = worksheet.sheet_by_name(sheet_name)
        rows = sheet.nrows # 获取行数
        cols = sheet.ncols # 获取列数，尽管没用到
        all_content = []
    
    
        CS2_35 = sheet.col_values(0) # 获取第二列内容， 数据格式为此数据的原有格式（原：字符串，读取：字符串；  原：浮点数， 读取：浮点数）


    worksheet = xlrd.open_workbook(last_last_last_last_path+r'\dataset\CACLE\CS2_36_cap_dropOutlier.xlsx')
    sheet_names= worksheet.sheet_names()
    print(sheet_names)
    CS2_36=[]
    for sheet_name in sheet_names:
        sheet = worksheet.sheet_by_name(sheet_name)
        rows = sheet.nrows # 获取行数
        cols = sheet.ncols # 获取列数，尽管没用到
        all_content = []
    
    
        CS2_36 = sheet.col_values(0) # 获取第二列内容， 数据格式为此数据的原有格式（原：字符串，读取：字符串；  原：浮点数， 读取：浮点数）
        
    worksheet = xlrd.open_workbook(last_last_last_last_path+r'\dataset\CACLE\CS2_37_cap_dropOutlier.xlsx')
    sheet_names= worksheet.sheet_names()
    print(sheet_names)
    CS2_37=[]
    for sheet_name in sheet_names:
        sheet = worksheet.sheet_by_name(sheet_name)
        rows = sheet.nrows # 获取行数
        cols = sheet.ncols # 获取列数，尽管没用到
        all_content = []
    
    
        CS2_37 = sheet.col_values(0) # 获取第二列内容， 数据格式为此数据的原有格式（原：字符串，读取：字符串；  原：浮点数， 读取：浮点数）
        
        
    worksheet = xlrd.open_workbook(last_last_last_last_path+r'\dataset\CACLE\CS2_38_cap_dropOutlier.xlsx')
    sheet_names= worksheet.sheet_names()
    print(sheet_names)
    CS2_38=[]
    for sheet_name in sheet_names:
        sheet = worksheet.sheet_by_name(sheet_name)
        rows = sheet.nrows # 获取行数
        cols = sheet.ncols # 获取列数，尽管没用到
        all_content = []
    
    
        CS2_38 = sheet.col_values(0) # 获取第二列内容， 数据格式为此数据的原有格式（原：字符串，读取：字符串；  原：浮点数， 读取：浮点数）
        
        



    fig, ax = plt.subplots()
    # 在生成的坐标系下画折线图
    ax.plot(CS2_35, linewidth=1,c='b',label="CS2_35")
    ax.plot(CS2_36, linewidth=1,c='g',label="CS2_36")
    ax.plot(CS2_37, linewidth=1,c='y',label="CS2_37")
    ax.plot(CS2_38, linewidth=1,c='r',label="CS2_38")

    # 显示图形
    font1 = { 
    'weight' : 'normal',
    'size' : 14,
    }
        
          
        #设置横纵坐标的名称以及对应字体格式
    font2 = {#'family' : 'Times New Roman',
    'weight' : 'normal',
    'size' : 30,
    }
        
    plt.xlabel('Cycle',font1) #X轴标签
    plt.ylabel("Capacity (Ah)",font1) #Y轴标签
    plt.legend()
    plt.savefig(last_last_last_last_path+r'\figure\by_code\Dataset_cycle_curves_comparision.eps',dpi=800,format='eps',bbox_inches = 'tight')
    plt.savefig(last_last_last_last_path+r'\figure\by_code\Dataset_cycle_curves_comparision.png',dpi=800,format='png',bbox_inches = 'tight')
    plt.show()
    
    return CS2_35,CS2_36,CS2_37,CS2_38
CS2_35,CS2_36,CS2_37,CS2_38=get_data_list()


# print(CS2_35)

CS2_35=list(np.array(CS2_35)-CS2_35[0])
CS2_36=list(np.array(CS2_36)-CS2_36[0])
CS2_37=list(np.array(CS2_37)-CS2_37[0])
CS2_38=list(np.array(CS2_38)-CS2_38[0])

# print(CS2_35)


# print(CS2_35[0])
# print(CS2_36[0])
# print(CS2_37[0])
# print(CS2_38[0])

def get_health_list(CS2_35,shed):
    for i in range(len(CS2_35)):
        if CS2_35[i]<shed:                           ########################################   小于门槛值
            CS235=CS2_35[0:i]
            return list(CS235)

# CS235=get_health_list(CS2_35,shed) 
# CS236=get_health_list(CS2_36,shed) 
# CS237=get_health_list(CS2_37,shed) 
# CS238=get_health_list(CS2_38,shed)   

# fig, ax = plt.subplots()
# # 在生成的坐标系下画折线图
# ax.plot(CS235, linewidth=1)
# ax.plot(CS236, linewidth=1)
# ax.plot(CS237, linewidth=1)
# ax.plot(CS238, linewidth=1)

# # 显示图形
# plt.show()

def get_input_out_2(CS236,CS237,time_windows):

    
    # CS235_health=get_health_list(CS235,shed) 
    CS237_health=get_health_list(CS237,shed) 
    CS236_health=get_health_list(CS236,shed) 
    # CS235_health[::-1] 
    
    # print(CS235_health)
    
    # CS235_health=list(reversed(CS235_health))
    # print(CS23_health)
    
    
    
    CS236_health=list(reversed(CS236_health))
    CS237_health=list(reversed(CS237_health))
    
    # for i in range(time_windows-1-2):
    #     CS235_health.append(0)
        
    for i in range(time_windows-1-2):
        CS236_health.append(0)    
    
    for i in range(time_windows-1-2):
        CS237_health.append(0)
        
    # CS235_health=list(reversed(CS235_health))
    CS236_health=list(reversed(CS236_health))
    CS237_health=list(reversed(CS237_health))   
    
    x_train_list=[]
    y_train_list=[]
    # for i in range(len(CS235_health)-time_windows+1):        
    #     x_train_list.append(np.array(CS235_health[i:i+time_windows]))
    #     y_train_list.append(len(CS235_health)-time_windows+1-1-i) 
               
    for i in range(len(CS236_health)-time_windows+1):        
        x_train_list.append(np.array(CS236_health[i:i+time_windows]))  
        y_train_list.append(len(CS236_health)-time_windows+1-1-i)        
    x_train_array=np.array(x_train_list)
    y_train_array=np.array(y_train_list)
    
    
    x_test_list=[]
    y_test_list=[]
    for i in range(len(CS237_health)-time_windows+1):        
        x_test_list.append(np.array(CS237_health[i:i+time_windows]))
        y_test_list.append(len(CS237_health)-time_windows+1-1-i) 
                  
    x_test_array=np.array(x_test_list)
    y_test_array=np.array(y_test_list)   
    
    return x_train_array , y_train_array , x_test_array ,  y_test_array












def get_input_out_3(CS235,CS236,CS237,time_windows):
    # min_len=min(len(CS235),len(CS236),len(CS237))
    
    # input_list=[]
    # output_list=[]
    
    # true_out_list=[]
    
    CS235_health=get_health_list(CS235,shed) 
    CS236_health=get_health_list(CS236,shed) 
    CS237_health=get_health_list(CS237,shed)     
    
    print(len(CS237_health))
    print("hhhhhhhhhhhh")
    # CS235_health[::-1] 
    
    # print(CS235_health)
    
    CS235_health=list(reversed(CS235_health))
    # print(CS23_health)
    
    
    
    CS236_health=list(reversed(CS236_health))
    CS237_health=list(reversed(CS237_health))
    
    for i in range(time_windows-1-2):
        CS235_health.append(0)
        
    for i in range(time_windows-1-2):
        CS236_health.append(0)    
    
    for i in range(time_windows-1-2):
        CS237_health.append(0)
        
    CS235_health=list(reversed(CS235_health))
    CS236_health=list(reversed(CS236_health))
    CS237_health=list(reversed(CS237_health))   
    
    x_train_list=[]
    y_train_list=[]
    for i in range(len(CS235_health)-time_windows+1):        
        x_train_list.append(np.array(CS235_health[i:i+time_windows]))
        y_train_list.append(len(CS235_health)-time_windows+1-1-i) 
               
    for i in range(len(CS236_health)-time_windows+1):        
        x_train_list.append(np.array(CS236_health[i:i+time_windows]))  
        y_train_list.append(len(CS236_health)-time_windows+1-1-i)        
    x_train_array=np.array(x_train_list)
    y_train_array=np.array(y_train_list)
    
    
    x_test_list=[]
    y_test_list=[]
    for i in range(len(CS237_health)-time_windows+1):        
        x_test_list.append(np.array(CS237_health[i:i+time_windows]))
        y_test_list.append(len(CS237_health)-time_windows+1-1-i) 
                  
    x_test_array=np.array(x_test_list)
    y_test_array=np.array(y_test_list)   
    
    print(y_test_array.shape)
    print("jjjjjjjjjj")
    
    return x_train_array , y_train_array , x_test_array ,  y_test_array
    
    
    
    
    
# x_train_array , y_train_array , x_test_array ,  y_test_array=get_input_out_3(CS2_35,CS2_36,CS2_37,20)      

# x_train_array , y_train_array , x_test_array ,  y_test_array=get_input_out_2(CS2_36,CS2_37,20)   








#import tensorflow as tf
import os
import logging
import numpy as np
#from numpy import trans
import matplotlib.pyplot as plt
#import tensorflow as tf
# import CMAPSSDataset
import pandas as pd
import datetime
import keras
from keras.layers import Lambda
import math
import keras.backend as K
import tensorflow as tf
from tfdeterminism import patch
from sklearn.model_selection import train_test_split
from keras.utils.vis_utils import plot_model
patch()
# tf.random.set_seed(0)
#import keras
#flags = tf.flags
#flags.DEFINE_string("weights", None, 'weights of the network')################# the file path of weights
#flags.DEFINE_integer("epochs", 100, 'train epochs')
#flags.DEFINE_integer("batch_size", 32, 'batch size for train/test')
#flags.DEFINE_integer("sequence_length", 32, 'sequence length')
#flags.DEFINE_boolean('debug', False, 'debugging mode or not')
#FLAGS = flags.FLAGS

def root_mean_squared_error(y_true, y_pred):
        return K.sqrt(K.mean(K.square(y_pred - y_true),axis=0))##################  axis=0

def rmse(predictions, targets):
    return np.sqrt(((predictions - targets) ** 2).mean())




    
segment=3



run_times=10



nb_epochs=2000           #200
batch_size=64    ## 64        #####300
# sequence_length=31    ############# min31  max303

patience=50
patience_reduce_lr=20





seed=2



num_filter1=64
num_filter2=128
num_filter3=64



kernel1_size=8
kernel2_size=5
kernel3_size=3



sequence_length=20







             
# X_train , Y_train , X_test ,  Y_test =get_input_out_3(CS2_35,CS2_36,CS2_37,sequence_length)  

# rul_pred_array
# [640.24347, 640.20013, 640.3949, 639.9918, 640.571, 646.75604, 651.7483, 655.2514, 654.5609, 652.39636, 649.5043, 646.4637, 645.68195, 645.19366, 644.9176, 645.39813, 645.7279, 644.50037, 641.3435, 641.41376, 640.60297, 638.2412, 637.4022, 628.928, 615.764, 612.9235, 616.69885, 624.5115, 634.5726, 637.0209, 633.8705, 630.7835, 630.06934, 633.02484, 639.5514, 646.5034, 650.5528, 650.7099, 647.9696, 645.11127, 646.1539, 651.57587, 659.193, 664.71124, 653.04913, 635.4428, 632.5107, 630.7191, 630.21234, 640.8147, 647.58624, 652.1958, 652.71497, 655.0368, 651.8627, 637.77264, 653.50867, 659.53284, 651.7022, 626.96924, 618.814, 616.1976, 610.02576, 620.1486, 634.3268, 627.6339, 619.2191, 626.0749, 624.98254, 620.33704, 636.3168, 638.2206, 642.8459, 642.9759, 632.639, 623.9098, 622.5685, 619.7476, 613.49384, 615.65686, 608.86804, 596.9789, 590.1312, 584.25037, 579.9601, 575.725, 575.6419, 571.31537, 561.8876, 558.6213, 557.2253, 555.5353, 555.69836, 564.5367, 564.0225, 560.89685, 566.91785, 572.56433, 578.5969, 575.66003, 570.72595, 572.0209, 571.9004, 563.69946, 555.95306, 548.0949, 541.42786, 532.4127, 530.92993, 532.2799, 524.29456, 509.51538, 510.7059, 515.5668, 524.14026, 534.98773, 532.37683, 533.63245, 538.4323, 537.9903, 530.97424, 525.3932, 525.0902, 523.8796, 521.9207, 522.4716, 522.3078, 519.0744, 503.16446, 497.73944, 494.4536, 490.22064, 486.98526, 488.5766, 490.22052, 480.5122, 478.7509, 481.09082, 482.14496, 487.3956, 501.07788, 507.83096, 510.82855, 514.1886, 520.529, 528.2003, 531.2668, 533.62244, 535.77686, 536.05444, 534.992, 536.0674, 526.97845, 520.444, 514.7549, 514.60266, 510.49698, 492.87842, 486.68042, 489.18024, 487.86407, 493.12344, 502.24814, 507.2752, 505.0594, 502.6546, 508.49692, 515.8886, 512.3586, 495.93857, 497.85687, 503.31705, 501.9515, 500.38654, 503.93488, 506.4012, 498.1017, 493.38165, 491.3588, 484.64496, 479.03833, 480.34796, 485.23322, 481.00708, 469.2503, 473.8952, 475.01407, 473.83368, 477.5022, 490.69565, 496.0235, 500.13678, 505.7071, 510.3401, 514.5818, 516.79047, 521.4042, 525.77136, 531.6742, 526.17505, 523.2844, 522.57513, 521.20154, 517.2708, 512.82245, 506.66318, 490.378, 472.54507, 475.70197, 472.7846, 476.53912, 490.65152, 491.063, 483.98737, 477.07404, 479.06137, 487.07657, 488.23895, 486.39795, 480.12592, 481.69897, 479.53598, 481.5044, 482.85034, 488.53644, 486.80307, 477.2146, 478.35464, 477.64566, 473.77832, 473.23456, 486.04517, 485.87183, 478.88922, 475.69904, 477.57495, 481.66876, 487.91022, 491.8163, 493.77466, 494.78394, 494.67975, 494.65204, 492.91022, 493.60287, 497.2452, 498.91803, 500.8898, 500.73114, 499.069, 491.13852, 483.8565, 486.63998, 483.98712, 485.1898, 485.20322, 473.09967, 468.85028, 463.25342, 460.81635, 465.31866, 470.7635, 472.9676, 462.48248, 459.13403, 457.73492, 454.45728, 457.55475, 463.3807, 467.6935, 470.2746, 459.94135, 458.675, 454.15094, 455.8497, 460.2911, 469.78387, 470.7398, 463.00458, 460.8978, 451.22247, 441.43497, 439.33163, 448.28564, 450.05722, 444.73315, 448.5494, 449.27667, 447.98676, 441.75128, 438.5031, 436.014, 438.68512, 438.96152, 447.70865, 450.99683, 454.56583, 454.7442, 455.3631, 448.5335, 444.71112, 447.95987, 451.93878, 450.49203, 443.31094, 437.7587, 433.5808, 428.19214, 424.17245, 426.73608, 427.09732, 423.4256, 417.48486, 417.67926, 417.13104, 413.35287, 415.41708, 417.77222, 417.74066, 409.31415, 409.08896, 406.56772, 403.19257, 407.55902, 407.32608, 406.52203, 402.5905, 396.56866, 389.7909, 388.86777, 390.1569, 396.4772, 398.55396, 400.65598, 395.29965, 394.9238, 392.0855, 389.66895, 383.55658, 385.97455, 384.8082, 383.8585, 384.91153, 388.11737, 390.483, 392.6076, 389.6229, 384.8108, 379.69302, 378.148, 380.1823, 382.2311, 383.6507, 379.7574, 381.7326, 381.01678, 377.45853, 372.5294, 372.2347, 371.7366, 367.67215, 361.45663, 351.82034, 349.89777, 344.29578, 343.5362, 340.2873, 336.19623, 333.84653, 335.27438, 333.67557, 334.24432, 332.60538, 343.7238, 346.82083, 346.0822, 338.72803, 343.62967, 341.94714, 339.06668, 343.38385, 347.50778, 355.56696, 358.80896, 353.55145, 343.01862, 337.47784, 335.79044, 338.89288, 342.90417, 341.72226, 334.47052, 333.8459, 332.93073, 332.11237, 330.59412, 336.3993, 338.14456, 335.89752, 337.55478, 341.63608, 344.81378, 347.62674, 344.73932, 341.97025, 340.934, 336.99316, 328.0442, 322.98364, 319.25464, 316.7835, 308.04007, 308.29486, 306.0722, 307.45197, 305.7146, 307.9315, 310.87018, 312.6007, 306.68314, 308.7287, 310.1643, 311.17102, 316.44843, 324.15204, 325.726, 320.33633, 319.40482, 316.39874, 312.94183, 313.3718, 316.24673, 318.24664, 315.59894, 305.9112, 302.1676, 295.9246, 288.29102, 288.19223, 289.39233, 292.59583, 290.32056, 290.36453, 293.25702, 297.73212, 294.4601, 291.6413, 296.96906, 304.10895, 306.18134, 301.86758, 299.82748, 301.68082, 305.42282, 307.62396, 307.46042, 306.98132, 307.37753, 308.87552, 310.73245, 314.38422, 312.92465, 312.04907, 309.44843, 309.6513, 305.00504, 303.96277, 302.33353, 299.69058, 294.6346, 292.75098, 288.97595, 287.17535, 287.40656, 287.86542, 288.61063, 288.23895, 286.3177, 286.4428, 285.01825, 288.2702, 294.51172, 297.676, 301.3759, 299.75543, 303.40646, 304.3763, 304.1898, 305.21912, 307.51996, 308.66104, 307.83197, 304.33896, 301.91077, 299.1038, 292.10333, 286.66003, 284.12866, 286.8969, 287.22003, 277.47342, 273.80035, 275.33646, 276.80466, 275.2891, 274.13705, 270.9247, 271.55927, 269.88998, 272.45746, 275.52594, 277.23923, 274.1186, 272.7917, 270.1638, 272.06143, 272.2818, 275.8177, 275.0721, 270.05328, 268.71704, 266.77106, 263.67163, 264.67352, 265.04727, 269.49652, 269.3902, 266.01746, 264.7699, 262.10925, 258.40765, 259.8572, 264.89197, 267.45807, 269.16187, 266.52985, 268.9898, 267.648, 265.61414, 265.87796, 267.14444, 268.0799, 267.7338, 263.80682, 264.78885, 261.0429, 256.83954, 257.59808, 257.4457, 258.1487, 250.58025, 250.26846, 252.64047, 253.54524, 253.44617, 252.35893, 247.77356, 247.77739, 251.13217, 250.5302, 255.94434, 256.38907, 254.66939, 254.44888, 251.11235, 247.5216, 247.16602, 252.81174, 254.92041, 249.46724, 243.55757, 242.75476, 237.1565, 235.61829, 226.78934, 233.36252, 239.36612, 240.17563, 232.0682, 230.65898, 223.47763, 220.96233, 226.65498, 230.10245, 232.32849, 230.64526, 232.43745, 228.08435, 221.94405, 216.0332, 218.75134, 221.70491, 220.34445, 216.00188, 218.15518, 212.2543, 214.5704, 217.60672, 217.36809, 219.17513, 206.65019, 207.58281, 213.10092, 215.1283, 211.45566, 209.8176, 203.66362, 201.99156, 197.7405, 202.53758, 207.58304, 214.78964, 208.06274, 197.82027, 187.9039, 184.13626, 188.41776, 191.54893, 184.91408, 179.74545, 180.67361, 182.50247, 175.06107, 169.12024, 172.31123, 169.13211, 161.719, 160.58282, 163.13376, 168.6181, 166.62485, 164.98686, 161.12735, 159.90038, 160.58273, 163.12546, 160.36426, 158.47395, 156.54025, 156.10408, 152.5765, 150.96582, 151.27786, 154.69696, 152.80173, 150.36841, 148.40848, 147.55351, 144.45813, 141.62021, 145.37526, 146.10939, 143.76115, 143.05348, 144.45964, 142.82172, 140.7695, 137.71933, 139.36415, 140.37056, 139.1219, 137.8555, 136.03976, 135.1801, 136.64798, 136.81514, 133.22604, 131.54697, 133.0472, 133.43733, 134.54768, 131.07271, 132.04716, 131.725, 132.71071, 129.41519, 129.87436, 131.85294, 132.3902, 130.1565, 126.74434, 127.134384, 128.89755, 128.92612, 127.67478, 125.52577, 125.291504, 123.774124, 117.77948, 119.34169, 117.84503, 122.25, 119.98496, 119.017044, 116.07314, 117.103065, 112.97141, 112.636856, 109.634705, 112.90122, 114.5151, 113.1733, 111.953354, 113.10333, 114.24843, 112.60173, 112.49158, 111.11163, 112.7089, 112.16124, 110.63666, 107.96855, 106.945724, 105.93483, 107.34281, 106.78833, 105.33592, 100.15238, 100.2741, 99.22767, 100.28179, 97.13292, 97.71443, 97.28721, 98.23787, 94.59469, 96.60347, 96.17084, 94.78067, 89.79748, 84.555855, 85.70781, 86.21472, 89.18805, 83.432465, 81.637634, 79.31327, 78.641464, 74.52164, 74.07057, 75.617386, 78.34579, 76.822914, 74.24259, 73.6123, 73.937744, 73.45061, 71.64734, 73.46444, 74.63379, 76.433464, 75.608925, 73.41379, 72.85418, 73.895, 73.950134, 73.42967, 73.5643, 73.90843, 74.10304, 72.74945, 75.31871, 73.224495, 73.21852, 74.96828, 73.53278, 75.26824, 72.69883, 71.13614, 69.060715, 68.755455, 65.76591, 63.080578, 65.2794, 66.82943, 68.65901, 65.324036, 65.76944, 65.19064, 65.49709, 62.532, 60.555847, 63.526623, 64.705666, 65.00896, 60.208366, 58.039917, 56.672325, 66.49434, 73.38521, 71.766106, 79.48253, 77.37901, 77.0892, 80.381935, 68.261, 54.407707, 49.621906, 47.18746, 46.105682, 44.745647, 49.71516, 51.08168, 50.82464, 49.59134, 41.067627, 41.085026, 39.178093, 31.74112, 29.012356, 32.03701, 33.80715, 33.95674, 30.541077, 25.240862, 20.215975, 18.524124, 18.284771, 18.85009, 20.536297, 20.707644]
# true_out_array
# [820.0, 819.0, 818.0, 817.0, 816.0, 815.0, 814.0, 813.0, 812.0, 811.0, 810.0, 809.0, 808.0, 807.0, 806.0, 805.0, 804.0, 803.0, 802.0, 801.0, 800.0, 799.0, 798.0, 797.0, 796.0, 795.0, 794.0, 793.0, 792.0, 791.0, 790.0, 789.0, 788.0, 787.0, 786.0, 785.0, 784.0, 783.0, 782.0, 781.0, 780.0, 779.0, 778.0, 777.0, 776.0, 775.0, 774.0, 773.0, 772.0, 771.0, 770.0, 769.0, 768.0, 767.0, 766.0, 765.0, 764.0, 763.0, 762.0, 761.0, 760.0, 759.0, 758.0, 757.0, 756.0, 755.0, 754.0, 753.0, 752.0, 751.0, 750.0, 749.0, 748.0, 747.0, 746.0, 745.0, 744.0, 743.0, 742.0, 741.0, 740.0, 739.0, 738.0, 737.0, 736.0, 735.0, 734.0, 733.0, 732.0, 731.0, 730.0, 729.0, 728.0, 727.0, 726.0, 725.0, 724.0, 723.0, 722.0, 721.0, 720.0, 719.0, 718.0, 717.0, 716.0, 715.0, 714.0, 713.0, 712.0, 711.0, 710.0, 709.0, 708.0, 707.0, 706.0, 705.0, 704.0, 703.0, 702.0, 701.0, 700.0, 699.0, 698.0, 697.0, 696.0, 695.0, 694.0, 693.0, 692.0, 691.0, 690.0, 689.0, 688.0, 687.0, 686.0, 685.0, 684.0, 683.0, 682.0, 681.0, 680.0, 679.0, 678.0, 677.0, 676.0, 675.0, 674.0, 673.0, 672.0, 671.0, 670.0, 669.0, 668.0, 667.0, 666.0, 665.0, 664.0, 663.0, 662.0, 661.0, 660.0, 659.0, 658.0, 657.0, 656.0, 655.0, 654.0, 653.0, 652.0, 651.0, 650.0, 649.0, 648.0, 647.0, 646.0, 645.0, 644.0, 643.0, 642.0, 641.0, 640.0, 639.0, 638.0, 637.0, 636.0, 635.0, 634.0, 633.0, 632.0, 631.0, 630.0, 629.0, 628.0, 627.0, 626.0, 625.0, 624.0, 623.0, 622.0, 621.0, 620.0, 619.0, 618.0, 617.0, 616.0, 615.0, 614.0, 613.0, 612.0, 611.0, 610.0, 609.0, 608.0, 607.0, 606.0, 605.0, 604.0, 603.0, 602.0, 601.0, 600.0, 599.0, 598.0, 597.0, 596.0, 595.0, 594.0, 593.0, 592.0, 591.0, 590.0, 589.0, 588.0, 587.0, 586.0, 585.0, 584.0, 583.0, 582.0, 581.0, 580.0, 579.0, 578.0, 577.0, 576.0, 575.0, 574.0, 573.0, 572.0, 571.0, 570.0, 569.0, 568.0, 567.0, 566.0, 565.0, 564.0, 563.0, 562.0, 561.0, 560.0, 559.0, 558.0, 557.0, 556.0, 555.0, 554.0, 553.0, 552.0, 551.0, 550.0, 549.0, 548.0, 547.0, 546.0, 545.0, 544.0, 543.0, 542.0, 541.0, 540.0, 539.0, 538.0, 537.0, 536.0, 535.0, 534.0, 533.0, 532.0, 531.0, 530.0, 529.0, 528.0, 527.0, 526.0, 525.0, 524.0, 523.0, 522.0, 521.0, 520.0, 519.0, 518.0, 517.0, 516.0, 515.0, 514.0, 513.0, 512.0, 511.0, 510.0, 509.0, 508.0, 507.0, 506.0, 505.0, 504.0, 503.0, 502.0, 501.0, 500.0, 499.0, 498.0, 497.0, 496.0, 495.0, 494.0, 493.0, 492.0, 491.0, 490.0, 489.0, 488.0, 487.0, 486.0, 485.0, 484.0, 483.0, 482.0, 481.0, 480.0, 479.0, 478.0, 477.0, 476.0, 475.0, 474.0, 473.0, 472.0, 471.0, 470.0, 469.0, 468.0, 467.0, 466.0, 465.0, 464.0, 463.0, 462.0, 461.0, 460.0, 459.0, 458.0, 457.0, 456.0, 455.0, 454.0, 453.0, 452.0, 451.0, 450.0, 449.0, 448.0, 447.0, 446.0, 445.0, 444.0, 443.0, 442.0, 441.0, 440.0, 439.0, 438.0, 437.0, 436.0, 435.0, 434.0, 433.0, 432.0, 431.0, 430.0, 429.0, 428.0, 427.0, 426.0, 425.0, 424.0, 423.0, 422.0, 421.0, 420.0, 419.0, 418.0, 417.0, 416.0, 415.0, 414.0, 413.0, 412.0, 411.0, 410.0, 409.0, 408.0, 407.0, 406.0, 405.0, 404.0, 403.0, 402.0, 401.0, 400.0, 399.0, 398.0, 397.0, 396.0, 395.0, 394.0, 393.0, 392.0, 391.0, 390.0, 389.0, 388.0, 387.0, 386.0, 385.0, 384.0, 383.0, 382.0, 381.0, 380.0, 379.0, 378.0, 377.0, 376.0, 375.0, 374.0, 373.0, 372.0, 371.0, 370.0, 369.0, 368.0, 367.0, 366.0, 365.0, 364.0, 363.0, 362.0, 361.0, 360.0, 359.0, 358.0, 357.0, 356.0, 355.0, 354.0, 353.0, 352.0, 351.0, 350.0, 349.0, 348.0, 347.0, 346.0, 345.0, 344.0, 343.0, 342.0, 341.0, 340.0, 339.0, 338.0, 337.0, 336.0, 335.0, 334.0, 333.0, 332.0, 331.0, 330.0, 329.0, 328.0, 327.0, 326.0, 325.0, 324.0, 323.0, 322.0, 321.0, 320.0, 319.0, 318.0, 317.0, 316.0, 315.0, 314.0, 313.0, 312.0, 311.0, 310.0, 309.0, 308.0, 307.0, 306.0, 305.0, 304.0, 303.0, 302.0, 301.0, 300.0, 299.0, 298.0, 297.0, 296.0, 295.0, 294.0, 293.0, 292.0, 291.0, 290.0, 289.0, 288.0, 287.0, 286.0, 285.0, 284.0, 283.0, 282.0, 281.0, 280.0, 279.0, 278.0, 277.0, 276.0, 275.0, 274.0, 273.0, 272.0, 271.0, 270.0, 269.0, 268.0, 267.0, 266.0, 265.0, 264.0, 263.0, 262.0, 261.0, 260.0, 259.0, 258.0, 257.0, 256.0, 255.0, 254.0, 253.0, 252.0, 251.0, 250.0, 249.0, 248.0, 247.0, 246.0, 245.0, 244.0, 243.0, 242.0, 241.0, 240.0, 239.0, 238.0, 237.0, 236.0, 235.0, 234.0, 233.0, 232.0, 231.0, 230.0, 229.0, 228.0, 227.0, 226.0, 225.0, 224.0, 223.0, 222.0, 221.0, 220.0, 219.0, 218.0, 217.0, 216.0, 215.0, 214.0, 213.0, 212.0, 211.0, 210.0, 209.0, 208.0, 207.0, 206.0, 205.0, 204.0, 203.0, 202.0, 201.0, 200.0, 199.0, 198.0, 197.0, 196.0, 195.0, 194.0, 193.0, 192.0, 191.0, 190.0, 189.0, 188.0, 187.0, 186.0, 185.0, 184.0, 183.0, 182.0, 181.0, 180.0, 179.0, 178.0, 177.0, 176.0, 175.0, 174.0, 173.0, 172.0, 171.0, 170.0, 169.0, 168.0, 167.0, 166.0, 165.0, 164.0, 163.0, 162.0, 161.0, 160.0, 159.0, 158.0, 157.0, 156.0, 155.0, 154.0, 153.0, 152.0, 151.0, 150.0, 149.0, 148.0, 147.0, 146.0, 145.0, 144.0, 143.0, 142.0, 141.0, 140.0, 139.0, 138.0, 137.0, 136.0, 135.0, 134.0, 133.0, 132.0, 131.0, 130.0, 129.0, 128.0, 127.0, 126.0, 125.0, 124.0, 123.0, 122.0, 121.0, 120.0, 119.0, 118.0, 117.0, 116.0, 115.0, 114.0, 113.0, 112.0, 111.0, 110.0, 109.0, 108.0, 107.0, 106.0, 105.0, 104.0, 103.0, 102.0, 101.0, 100.0, 99.0, 98.0, 97.0, 96.0, 95.0, 94.0, 93.0, 92.0, 91.0, 90.0, 89.0, 88.0, 87.0, 86.0, 85.0, 84.0, 83.0, 82.0, 81.0, 80.0, 79.0, 78.0, 77.0, 76.0, 75.0, 74.0, 73.0, 72.0, 71.0, 70.0, 69.0, 68.0, 67.0, 66.0, 65.0, 64.0, 63.0, 62.0, 61.0, 60.0, 59.0, 58.0, 57.0, 56.0, 55.0, 54.0, 53.0, 52.0, 51.0, 50.0, 49.0, 48.0, 47.0, 46.0, 45.0, 44.0, 43.0, 42.0, 41.0, 40.0, 39.0, 38.0, 37.0, 36.0, 35.0, 34.0, 33.0, 32.0, 31.0, 30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]
# error_pred_array
# [179.7565185546875, 178.79989624023438, 177.6050537109375, 177.008203125, 175.4289978027344, 168.24390258789063, 162.25174560546876, 161.15410766601562, 163.50623168945313, 165.84512939453126, 170.06134643554688, 171.7759582519531, 172.05897827148436, 172.41018676757812, 172.23230590820313, 171.48643798828124, 171.5051696777344, 172.818701171875, 174.41045532226562, 174.56839599609376, 174.45684814453125, 170.90479736328126, 168.86195068359376, 172.88038940429686, 180.23604736328124, 182.446142578125, 182.12069702148438, 177.3651916503906, 171.44429931640624, 170.8995788574219, 175.910107421875, 180.3989685058594, 179.3541015625, 178.80352172851562, 172.3091064453125, 169.62869262695312, 168.15960693359375, 170.5484375, 174.09120483398436, 175.32583618164062, 175.476171875, 168.7642333984375, 164.18056640625, 162.38619384765624, 167.02123413085937, 177.32906494140624, 178.11329345703126, 179.7748229980469, 179.30670776367188, 170.5741943359375, 166.9589111328125, 169.7216369628906, 166.0891906738281, 155.1750915527344, 149.71173095703125, 150.37482299804688, 144.0145690917969, 140.3317138671875, 147.02365112304688, 150.8654541015625, 151.7326232910156, 151.75352783203124, 159.52977294921874, 154.78228759765625, 145.2505676269531, 153.72041015625, 160.1048828125, 161.26539306640626, 165.32398681640626, 175.60254516601563, 166.88983154296875, 162.37476806640626, 158.15640869140626, 159.88076171875, 167.18407592773437, 171.09931640625, 171.11254272460937, 172.9453369140625, 172.52877197265624, 171.33228759765626, 175.92427978515624, 182.7908447265625, 186.44043579101563, 190.3085693359375, 193.01817626953124, 192.909228515625, 192.808935546875, 196.55776977539062, 202.4654968261719, 202.954443359375, 203.91345825195313, 205.1114990234375, 203.72363891601563, 199.26586303710937, 200.18734741210938, 200.48584594726563, 194.55921630859376, 188.70052490234374, 183.81255493164062, 187.2754150390625, 186.6035949707031, 190.1190979003906, 190.40831909179687, 196.6985595703125, 202.06630249023436, 204.47492065429688, 209.83651428222657, 218.24452514648436, 216.37741088867188, 215.08435668945313, 221.67654418945312, 228.81846313476564, 225.42987365722655, 223.43944702148437, 214.81390075683595, 206.06745300292968, 209.17894897460937, 209.08324279785157, 200.9418151855469, 201.56575927734374, 204.03441772460937, 207.148486328125, 207.52568664550782, 205.57842407226562, 206.91216430664062, 202.0834930419922, 203.49945678710938, 206.77870483398436, 217.2460906982422, 221.0577880859375, 224.63600158691406, 230.13040466308593, 229.98882751464845, 229.353125, 229.47936096191407, 236.73439025878906, 235.83736572265624, 231.4301971435547, 231.51639099121093, 227.06044921875, 216.80284729003907, 209.74478759765626, 204.236962890625, 200.72432861328124, 196.03775329589843, 186.21648864746095, 184.21380004882812, 182.51966247558593, 181.1163757324219, 180.33003845214844, 183.28564453125, 186.28760375976563, 191.70939025878906, 195.15338745117188, 196.1662628173828, 194.755419921875, 197.0860809326172, 210.77368774414063, 215.13067932128905, 208.06777648925782, 208.67402038574218, 199.48131713867187, 190.03124389648437, 186.4876220703125, 186.69161376953124, 191.2678649902344, 184.67794799804688, 175.84373168945314, 177.2785675048828, 186.4111358642578, 184.18742980957032, 177.91262512207032, 180.7034912109375, 178.7471710205078, 175.93558044433593, 177.69955749511718, 183.43543701171876, 185.91075744628907, 187.7384826660156, 194.80844116210938, 200.54564819335937, 197.91241455078125, 193.68587341308594, 198.02142639160155, 205.8739501953125, 198.7673797607422, 194.74513244628906, 195.8885528564453, 192.78096923828124, 183.442724609375, 178.01744079589844, 171.57097473144532, 165.43389282226562, 162.51463623046874, 155.66351318359375, 157.25739440917968, 152.93008728027343, 148.638330078125, 142.9440490722656, 143.9458984375, 147.62482604980468, 147.71921081542968, 148.15150756835936, 151.04509887695312, 149.54561462402344, 153.99246520996093, 164.50848388671875, 175.6171081542969, 173.90514526367187, 176.4310729980469, 170.2128448486328, 153.85843811035156, 155.2169982910156, 159.40526733398437, 164.51043701171875, 162.82093505859376, 155.44149169921874, 155.6750274658203, 153.80923461914062, 157.27037353515624, 152.96240844726563, 155.82096252441406, 156.08025817871095, 154.05110778808594, 151.2430908203125, 154.05311584472656, 159.84225158691407, 156.6392364501953, 157.0367004394531, 161.74502563476562, 160.98980102539062, 148.9339569091797, 149.40882568359376, 152.21820678710938, 152.5699676513672, 149.366064453125, 143.59757385253906, 138.7801544189453, 136.56786193847657, 135.14898681640625, 132.03964233398438, 133.7353302001953, 136.9209442138672, 137.568310546875, 136.28704833984375, 136.6195495605469, 135.17141723632812, 133.59551391601562, 131.78803405761718, 136.5363006591797, 138.7307891845703, 141.78267517089844, 142.51752014160155, 140.19783935546874, 138.4231201171875, 133.60730895996093, 134.54212036132813, 135.48690795898438, 137.3046447753906, 140.9838653564453, 140.92599792480468, 137.45010681152343, 133.20181579589843, 133.17230224609375, 134.99386596679688, 134.43988037109375, 138.07477111816405, 139.1183654785156, 134.92301330566406, 130.55822143554687, 120.61651306152343, 125.59208068847656, 126.3481689453125, 128.58593139648437, 128.94729309082032, 127.81248779296875, 122.52344665527343, 120.16149291992187, 122.83105163574218, 121.92239379882812, 128.5944854736328, 136.66152954101562, 137.9257385253906, 128.35240783691407, 129.64300842285155, 136.493115234375, 134.06129760742186, 130.38226623535155, 128.14361877441405, 132.49593505859374, 134.8359802246094, 134.32315368652343, 129.7771789550781, 133.43130798339843, 127.51793518066407, 119.56022644042969, 110.48741455078125, 106.70439147949219, 107.67403259277344, 111.2309326171875, 117.51367797851563, 114.67778625488282, 110.32808227539063, 110.85125122070312, 118.47029113769531, 125.72589721679688, 129.32477722167968, 134.5232666015625, 138.78748168945313, 135.73402099609376, 132.2039367675781, 135.3686767578125, 136.96416931152345, 132.2856201171875, 129.3519287109375, 128.85712890625, 123.44877624511719, 118.08884887695312, 113.6595458984375, 115.55279541015625, 119.23590087890625, 120.94646606445312, 122.24330444335938, 124.397705078125, 123.07764587402343, 121.78179321289062, 117.96878967285156, 121.67881469726562, 127.35490417480469, 127.12509155273438, 126.00777587890624, 121.90390014648438, 121.19705505371094, 122.0992431640625, 131.2197021484375, 138.04676208496093, 139.99996337890624, 139.40809020996093, 141.52544250488282, 140.38384094238282, 140.10520935058594, 140.7014373779297, 138.91506958007812, 133.72095642089843, 129.38636169433593, 125.2712646484375, 126.77495422363282, 129.41913452148438, 133.13768005371094, 135.23617553710938, 132.19354553222655, 128.60519409179688, 125.63163146972656, 126.7411376953125, 122.4163330078125, 119.42933959960938, 118.5643798828125, 117.73031005859374, 113.07314758300781, 108.89171752929687, 107.0739013671875, 108.46561279296876, 115.62030639648438, 117.52095031738281, 120.13028869628906, 122.08038330078125, 126.49396667480468, 123.49295959472656, 122.57789611816406, 118.98948364257812, 119.52918090820313, 120.13092041015625, 126.47816772460938, 119.03826293945312, 111.88948974609374, 109.35274963378906, 111.82169799804687, 107.62633972167968, 105.20714721679687, 108.70227355957032, 110.76703186035157, 107.93831787109374, 104.1233154296875, 101.27919311523438, 103.490087890625, 116.78083190917968, 120.98506774902344, 119.46051940917968, 113.39412536621094, 107.68720397949218, 107.66846923828125, 112.59235229492188, 113.13468322753906, 112.96307373046875, 112.4247039794922, 111.80899047851562, 108.92200012207032, 109.1166259765625, 111.35332336425782, 112.96802673339843, 110.70341186523437, 108.6189453125, 105.91245727539062, 107.75846862792969, 107.75487670898437, 105.59036865234376, 105.01410827636718, 107.29686279296875, 105.18055419921875, 105.09582824707032, 102.316650390625, 104.85552062988282, 102.76712646484376, 102.43878784179688, 100.94852600097656, 105.38121032714844, 103.33713073730469, 98.4600830078125, 93.14234008789063, 94.68620910644532, 92.2329315185547, 91.25899047851563, 92.632861328125, 94.46076049804688, 85.0501220703125, 80.76817016601562, 80.39096374511719, 78.67698669433594, 78.43017883300782, 79.96627807617188, 84.11742095947265, 84.41588134765625, 81.99895324707032, 82.23396606445313, 87.90995483398437, 86.957568359375, 88.07540588378906, 94.7089630126953, 93.80777130126953, 92.87327270507812, 89.83680725097656, 93.73943634033203, 93.94716796875, 91.72270202636719, 88.7950653076172, 90.03356018066407, 90.80411682128906, 86.38059692382812, 80.75492858886719, 80.10723571777343, 87.0032745361328, 86.61790924072265, 83.95692138671875, 77.39305725097657, 71.60750427246094, 72.748388671875, 72.69745483398438, 73.19031677246093, 73.93069152832031, 73.31939392089843, 71.1854461669922, 70.25902099609375, 69.59869384765625, 70.20079956054687, 73.2107940673828, 73.5567138671875, 73.01997680664063, 70.14876708984374, 67.31105041503906, 64.23593444824219, 62.96726989746094, 61.98131256103515, 62.085662841796875, 65.25503082275391, 68.47254486083985, 64.2993881225586, 62.194140625, 60.02036590576172, 59.48621673583985, 58.48274536132813, 60.94374542236328, 63.39827117919922, 64.13004608154297, 64.4966812133789, 65.10137939453125, 65.69117736816406, 65.4892578125, 67.91686248779297, 71.05202789306641, 70.73869171142579, 71.95375061035156, 72.41808471679687, 70.75357055664062, 67.78683776855469, 64.69425964355469, 61.178506469726564, 58.04363250732422, 54.7202880859375, 54.10384826660156, 54.927879333496094, 53.988652038574216, 53.23516998291016, 50.18997039794922, 48.22997131347656, 47.5810043334961, 47.40792999267578, 47.285160827636716, 46.4001220703125, 48.70554809570312, 51.63339691162109, 49.8622329711914, 48.073542785644534, 46.928375244140625, 49.3717529296875, 48.87038726806641, 51.97164764404297, 53.838479614257814, 55.498051452636716, 52.601678466796876, 50.47318878173828, 48.139888000488284, 47.948019409179686, 47.26488037109375, 51.94290008544922, 53.487098693847656, 55.86692657470703, 53.28361053466797, 50.93399200439453, 49.534219360351564, 48.77308807373047, 47.57017974853515, 52.630366516113284, 57.59593048095703, 58.215327453613284, 58.01747283935547, 55.8380615234375, 57.42401275634766, 57.59318542480469, 57.371681213378906, 59.7119873046875, 60.88514709472656, 61.72842254638672, 62.40176849365234, 62.4031494140625, 60.939143371582034, 57.106964111328125, 54.18020782470703, 52.52557525634766, 51.90726776123047, 52.868263244628906, 49.33946838378906, 48.48013153076172, 49.33152618408203, 50.68386535644531, 52.16461181640625, 52.37880096435547, 48.46585693359375, 48.92523193359375, 52.74629669189453, 53.56917266845703, 59.452142333984376, 59.281533813476564, 56.54429626464844, 58.055274963378906, 57.98653564453125, 57.875047302246095, 58.50056457519531, 63.57459411621094, 64.95002593994141, 60.59887847900391, 54.64120330810547, 53.199510192871095, 49.23833312988281, 50.48830871582031, 48.01563262939453, 52.80784149169922, 57.09694061279297, 57.10055389404297, 50.128912353515624, 50.286198425292966, 48.51468505859375, 47.236933898925784, 52.9168212890625, 57.787252807617186, 59.34640808105469, 58.30819549560547, 57.75082244873047, 54.10471954345703, 53.562522888183594, 52.7595932006836, 56.898939514160155, 57.916998291015624, 57.485939025878906, 56.198309326171874, 54.905076599121095, 47.82501983642578, 49.64864044189453, 52.12993621826172, 50.560838317871095, 52.601766967773436, 43.481825256347655, 43.924169921875, 48.49085388183594, 51.315617370605466, 49.392050170898436, 49.398617553710935, 44.88942260742188, 41.999105834960936, 40.573158264160156, 47.47792053222656, 55.183509826660156, 60.735678100585936, 53.21940612792969, 45.724046325683595, 40.88388671875, 40.93474426269531, 46.717282104492185, 47.380958557128906, 45.88717803955078, 39.91154327392578, 40.06141662597656, 41.208306884765626, 39.99677734375, 38.09983367919922, 40.55144348144531, 34.38941497802735, 38.89256134033203, 35.228318786621095, 34.413038635253905, 36.64636383056641, 36.68757781982422, 35.981764221191405, 33.027078247070314, 34.83157043457031, 40.65508270263672, 40.333134460449216, 37.142852783203125, 34.25389404296875, 34.85689849853516, 34.160316467285156, 30.346939086914062, 32.45440826416016, 38.6160171508789, 37.91220245361328, 33.64551620483398, 32.92597961425781, 34.23843841552734, 33.29162063598633, 28.212077331542968, 29.41297607421875, 32.192335510253905, 31.588609313964845, 31.202882385253908, 32.07442398071289, 30.756808471679687, 30.255961608886718, 28.124858856201172, 27.459444427490233, 30.165607452392578, 29.22720947265625, 27.715966796875, 29.802952575683594, 30.283824920654297, 30.300350952148438, 29.800392150878906, 27.15015411376953, 25.7131591796875, 26.588068389892577, 25.450454711914062, 25.267532348632812, 27.122042083740233, 27.96265106201172, 25.459687805175783, 22.429878997802735, 23.073983001708985, 22.9243408203125, 23.9929931640625, 25.20982666015625, 25.586458587646483, 26.652890014648438, 25.619548034667968, 24.71044464111328, 26.41111831665039, 26.795886993408203, 28.591026306152344, 26.659796905517577, 26.747905731201172, 27.18464584350586, 27.374628448486327, 26.866575622558592, 22.742890930175783, 25.55388641357422, 24.98643264770508, 25.63222885131836, 23.59993896484375, 24.93462371826172, 24.53389663696289, 25.116465759277343, 21.93481903076172, 24.157333374023438, 24.482035064697264, 23.42351531982422, 22.804337310791016, 24.220940399169923, 24.913623046875, 23.706122589111327, 24.765341186523436, 24.217237091064455, 25.332565307617188, 25.03148956298828, 24.361714935302736, 23.366253662109376, 23.504620361328126, 23.172919464111327, 24.839344024658203, 24.523575592041016, 24.319757080078126, 21.58119888305664, 22.012639617919923, 21.869361877441406, 23.0734001159668, 22.175414276123046, 23.073333740234375, 22.03469314575195, 23.407337188720703, 20.993476104736327, 23.74037094116211, 24.037442779541017, 24.41908493041992, 20.86664276123047, 18.33052978515625, 20.336353302001953, 20.086328125, 22.30056686401367, 18.622786712646484, 17.767452239990234, 17.376512908935545, 18.63839645385742, 16.525440216064453, 16.882891845703124, 17.228534698486328, 18.302884674072267, 17.495103454589845, 15.387251281738282, 15.831942749023437, 17.702149200439454, 17.083902740478514, 16.220211029052734, 17.955626678466796, 18.995665740966796, 20.77346420288086, 20.446353149414062, 19.086974334716796, 19.559869384765626, 21.103762817382812, 21.950128936767577, 22.229671478271484, 23.16430206298828, 24.30842742919922, 25.303042602539062, 24.74945068359375, 28.118701934814453, 26.824491119384767, 27.618517303466795, 30.168273162841796, 29.532778167724608, 32.06824493408203, 30.298825836181642, 29.536144256591797, 28.260711669921875, 28.75545654296875, 26.565907669067382, 24.68057746887207, 27.679396438598634, 30.029430770874022, 32.6590087890625, 30.124036407470705, 31.369441986083984, 31.590645599365235, 32.697103881835936, 30.53200035095215, 29.35584716796875, 33.12661476135254, 35.10567016601563, 36.2089599609375, 32.20836868286133, 30.839923095703124, 30.27232437133789, 40.894338607788086, 48.58521194458008, 47.76611099243164, 56.28252601623535, 54.97902336120605, 55.489206314086914, 59.58192939758301, 48.26099052429199, 35.20770416259766, 31.22190418243408, 29.587460899353026, 29.3056791305542, 28.756065368652344, 34.51516246795654, 36.68167839050293, 37.224635696411134, 36.79134254455566, 29.06762752532959, 29.885022354125976, 28.778093338012695, 22.14111852645874, 20.212356090545654, 24.037010669708252, 26.607150650024415, 27.556742095947264, 24.94107437133789, 20.440859413146974, 16.21597385406494, 15.324123764038086, 15.884771537780761, 17.25009078979492, 19.73629641532898, 20.707643270492554]


X_train , Y_train , X_test ,  Y_test =get_input_out_3(CS2_35,CS2_36,CS2_38,sequence_length) 

# rul_pred_array
# [640.2638, 640.2338, 639.9586, 639.7268, 640.84216, 647.54083, 652.7472, 656.3685, 656.0379, 653.2189, 650.63525, 647.35394, 646.74023, 646.2994, 645.967, 646.7759, 646.9007, 644.8055, 641.3334, 641.2361, 640.8529, 640.24817, 638.7047, 628.2843, 615.6909, 616.3092, 623.40295, 630.21814, 637.97595, 639.6832, 634.8037, 633.9588, 633.9271, 640.6551, 646.8053, 652.35376, 653.7205, 651.6853, 648.9877, 647.9951, 651.1446, 655.8116, 663.2464, 660.78815, 638.84784, 630.7402, 629.5962, 628.8661, 628.7279, 643.1181, 642.4058, 636.3036, 646.7684, 649.50793, 644.0365, 634.14075, 657.13275, 658.9554, 638.60614, 630.6212, 624.0784, 619.1483, 617.79, 634.18585, 638.1526, 623.6941, 625.8482, 632.69324, 630.76843, 624.3636, 638.5076, 639.1909, 647.0736, 643.13684, 627.7255, 623.14026, 620.3446, 618.44666, 618.1465, 615.35486, 605.2337, 594.71844, 587.5086, 582.7233, 579.35706, 578.5424, 578.6277, 569.4335, 560.06976, 560.4929, 563.69403, 566.1092, 572.91296, 571.27527, 575.6464, 581.0604, 586.76984, 585.7844, 580.9946, 582.1033, 582.10535, 573.2013, 566.63605, 558.4759, 552.0082, 544.89526, 543.4496, 545.8635, 534.4691, 518.75305, 522.22876, 531.6213, 541.661, 553.08856, 553.6462, 553.6373, 558.2322, 557.37305, 541.78986, 533.1878, 532.3795, 529.32166, 526.2583, 529.6368, 525.2346, 511.15952, 501.70605, 498.596, 493.95575, 492.2085, 496.13828, 493.81097, 486.27228, 486.0689, 491.16992, 498.06805, 505.36823, 513.4586, 523.25635, 530.13196, 538.5374, 546.8972, 548.99817, 558.4176, 562.1979, 567.71783, 572.96375, 577.60693, 570.38165, 577.80444, 573.47345, 574.4366, 569.8109, 552.8644, 529.6376, 528.7592, 527.00037, 523.987, 532.5606, 538.78845, 522.3634, 508.80414, 505.24692, 503.12054, 509.13068, 516.51025, 513.6226, 498.3265, 504.3452, 510.8496, 509.21362, 507.7521, 511.0731, 513.97845, 504.02173, 499.69238, 496.06573, 489.41632, 480.48657, 481.90277, 483.61407, 474.0331, 463.40497, 464.2339, 462.61273, 462.0252, 468.70303, 475.86377, 480.5666, 479.6668, 483.5506, 487.28656, 486.41373, 493.2198, 496.83658, 503.49335, 512.8161, 509.4002, 502.90448, 506.77655, 506.58545, 511.90274, 511.2707, 504.2413, 491.4357, 489.33798, 490.70734, 489.34286, 492.33926, 505.55054, 499.31708, 497.0835, 487.24332, 484.39722, 491.78452, 495.2733, 496.42163, 496.12915, 500.3675, 494.3894, 494.65048, 498.0219, 501.43393, 496.3316, 483.21353, 484.75128, 479.4645, 471.1014, 467.45792, 481.74503, 477.97974, 467.94098, 463.17865, 461.9284, 464.46085, 470.62256, 476.23444, 479.73575, 482.6792, 481.48544, 483.05624, 484.17108, 484.5329, 487.01068, 489.96542, 491.13446, 490.04865, 491.02997, 485.22476, 477.84784, 481.22485, 481.73047, 481.9773, 481.98447, 470.4698, 467.61246, 463.4672, 458.22818, 462.604, 467.8462, 471.77164, 460.61386, 458.95404, 459.91904, 455.74106, 459.5796, 464.71515, 468.38388, 469.63858, 460.14252, 449.16293, 444.27826, 443.76236, 447.3166, 452.84766, 452.7376, 445.21655, 442.5839, 431.78192, 415.34024, 412.72617, 419.64755, 421.38354, 418.88104, 423.14526, 424.8672, 422.4918, 417.27036, 414.80304, 413.22934, 415.54843, 422.11392, 421.70923, 426.85123, 423.6957, 422.74707, 417.81982, 412.1022, 408.76538, 411.26694, 415.15732, 414.73398, 409.2032, 405.057, 402.32043, 402.14383, 407.43707, 410.52734, 412.95132, 409.79468, 413.17535, 412.41534, 410.86713, 411.69766, 411.6022, 412.4091, 403.97662, 403.38318, 401.85547, 402.51788, 403.78046, 409.05154, 411.28662, 410.58038, 399.17526, 380.80463, 376.16284, 379.73822, 385.8676, 391.46393, 389.52484, 387.54117, 387.92856, 384.87598, 380.58917, 374.9804, 369.43365, 380.19073, 386.92178, 390.07794, 394.24655, 395.74628, 396.19858, 395.90125, 390.4209, 383.24313, 377.8222, 375.43515, 376.8251, 378.949, 378.7485, 372.21613, 373.96478, 371.1656, 366.01675, 362.96307, 360.91858, 360.1914, 351.57617, 351.23563, 351.17902, 353.82114, 351.8738, 357.89536, 359.3686, 362.0889, 355.52118, 358.3515, 358.4753, 356.77142, 365.7575, 374.5812, 374.08307, 365.95465, 362.02023, 356.5419, 354.1161, 348.439, 351.4124, 358.84036, 362.55664, 361.03192, 354.6839, 343.9208, 344.7818, 343.72946, 346.9714, 347.37952, 331.97348, 326.1955, 325.60944, 324.91083, 320.50085, 321.21783, 330.21835, 334.08908, 333.76212, 333.30173, 336.7456, 341.75433, 346.26276, 346.91678, 344.00238, 342.12582, 340.54324, 333.37512, 326.79498, 320.1485, 314.75955, 308.2007, 302.9378, 301.63278, 300.05005, 297.07227, 298.0666, 301.19278, 303.4389, 301.95526, 303.7937, 304.2053, 308.95242, 312.3003, 322.60187, 327.9004, 323.64246, 314.7433, 316.98785, 310.21466, 309.18655, 311.67163, 311.73376, 312.3441, 305.07538, 301.4581, 295.06714, 285.73108, 284.49734, 289.14273, 293.80087, 296.52664, 294.35727, 299.17294, 303.7364, 302.29968, 298.50922, 300.64117, 305.99185, 311.399, 307.54236, 306.1403, 305.52365, 306.63443, 307.55414, 307.9188, 306.06265, 304.3891, 306.2422, 305.61264, 309.77768, 309.24323, 305.542, 306.10242, 306.42316, 301.3056, 300.90707, 299.48492, 298.9393, 297.1369, 289.0808, 287.398, 287.47614, 284.70462, 285.68076, 286.676, 287.3287, 288.267, 288.97162, 288.3819, 291.08728, 297.2618, 302.59906, 307.12482, 309.80234, 310.92337, 313.53418, 313.95224, 315.4682, 318.26096, 318.66464, 318.29492, 314.25577, 311.49307, 308.80206, 304.38208, 298.45718, 296.48993, 297.74344, 299.24347, 292.62473, 289.33026, 289.2372, 290.9333, 287.94498, 287.6911, 284.98032, 284.73434, 282.4622, 282.62454, 283.8222, 284.27377, 281.1516, 280.375, 280.1167, 279.19553, 280.50528, 281.0497, 281.4603, 277.53494, 277.63248, 276.65063, 277.03842, 275.65884, 277.23236, 279.40073, 278.38727, 274.98886, 274.88223, 272.4888, 274.01944, 279.17767, 281.7685, 284.55255, 283.29382, 285.07004, 286.07825, 284.91818, 285.29626, 287.52393, 289.19022, 289.76205, 286.0762, 284.91254, 283.1488, 280.43204, 276.49094, 275.6474, 277.26642, 278.54736, 271.879, 269.17273, 269.33856, 269.027, 266.9915, 267.7809, 265.08588, 262.6461, 262.53412, 265.46048, 266.663, 265.73782, 262.37576, 261.65118, 259.85248, 259.09006, 260.47076, 265.52972, 266.02524, 256.44424, 250.4626, 248.81084, 247.52242, 241.57173, 241.35312, 246.63506, 247.21346, 244.69987, 244.80486, 239.15488, 237.39653, 243.46646, 247.79227, 250.7613, 253.03067, 254.20036, 252.79118, 247.41643, 246.90974, 246.40056, 249.61848, 250.22993, 247.17586, 247.70438, 247.27214, 241.34372, 238.64388, 239.24373, 242.01343, 244.54631, 232.10718, 233.48633, 238.26775, 241.89021, 238.77524, 235.61197, 228.75716, 229.25945, 226.73706, 232.06848, 235.30806, 239.40845, 236.68562, 224.73486, 211.88496, 209.10373, 212.09798, 213.30124, 212.01022, 209.06088, 209.78511, 210.44771, 203.33046, 194.93349, 195.00192, 192.52267, 189.37708, 189.96054, 193.43857, 196.59232, 195.27422, 192.98373, 186.39822, 180.45514, 185.68733, 187.67262, 184.29446, 184.02881, 180.72716, 178.37918, 173.18723, 171.26605, 175.92984, 178.53595, 174.76259, 174.2713, 171.51642, 168.84618, 164.16306, 166.55136, 171.89232, 169.731, 169.20828, 171.67773, 172.86893, 169.19283, 164.68008, 165.1112, 168.79129, 168.32639, 168.06638, 166.47404, 166.45807, 168.44812, 170.4491, 169.53763, 163.21129, 163.42114, 167.01724, 168.8037, 168.98457, 167.63408, 165.19437, 163.40018, 159.97339, 160.21921, 163.72925, 165.0165, 164.39273, 158.71034, 156.7968, 154.23215, 156.21693, 156.93181, 157.12157, 153.25601, 151.9354, 148.80302, 147.72913, 145.14273, 148.04793, 151.60886, 147.11131, 148.862, 149.52013, 149.85309, 148.54092, 147.5966, 145.0571, 147.72308, 148.46829, 148.1262, 147.74438, 148.41335, 147.5111, 145.47958, 143.00839, 140.07011, 142.98965, 143.14236, 140.3899, 135.46097, 136.4108, 136.88956, 139.889, 140.13638, 138.98143, 133.47171, 134.82881, 134.91263, 136.93362, 135.30351, 136.85081, 136.53214, 136.7127, 134.46521, 137.40521, 139.52519, 139.05637, 132.66377, 131.38629, 129.85545, 129.79276, 129.59128, 131.22156, 128.41982, 128.75102, 126.912476, 125.193016, 125.59227, 124.71133, 127.18767, 127.0663, 125.46922, 123.89679, 123.56704, 120.39409, 121.7784, 121.842995, 125.83663, 126.58734, 123.67979, 123.33916, 124.38237, 123.02716, 121.642685, 120.045395, 119.38037, 120.91838, 120.72276, 121.45174, 124.646835, 123.54921, 122.009445, 123.33126, 123.695595, 123.83147, 121.88664, 121.97478, 122.3905, 122.54915, 120.21039, 121.301956, 121.540634, 124.082016, 121.616196, 120.58209, 121.040016, 122.86418, 121.6075, 117.64175, 115.074196, 117.29848, 119.86841, 117.482506, 117.134926, 121.29883, 118.269936, 113.25096, 115.31633, 113.92439, 115.376915, 118.1176, 99.96849, 87.0545, 86.29067, 83.66188, 80.1526, 73.401215, 77.13469, 77.50792, 82.38699, 79.67123, 77.248795, 74.50481, 69.46887, 58.84305, 54.8236, 58.191063, 58.09458, 59.661205, 51.18214, 45.628365, 38.512123, 37.501026, 36.654037, 35.646675, 36.88641, 35.933464, 34.11808, 29.195211, 26.121723, 26.218542, 27.781153, 28.60563, 29.77327, 32.797783, 34.074177, 33.85972, 31.739878, 31.3724, 31.009726, 30.468176, 29.717815, 29.43154, 28.975616, 32.378258, 33.803936, 36.207096, 34.22335, 33.71507, 32.762592, 32.39533, 31.58137, 30.899832, 30.385223, 31.015766, 29.988968, 30.316645, 28.30693, 28.13478, 27.212555, 25.407167, 25.386671, 28.091946, 27.89758, 25.64541, 22.687765, 20.89239, 19.815756, 18.983147, 18.37227, 18.187893, 17.8709, 17.846947, 17.80736, 17.591717, 17.167192, 16.387264, 15.4728365, 14.916109, 14.191609, 14.188156, 14.088129, 13.551312, 13.45193, 12.974179]
# true_out_array
# [874.0, 873.0, 872.0, 871.0, 870.0, 869.0, 868.0, 867.0, 866.0, 865.0, 864.0, 863.0, 862.0, 861.0, 860.0, 859.0, 858.0, 857.0, 856.0, 855.0, 854.0, 853.0, 852.0, 851.0, 850.0, 849.0, 848.0, 847.0, 846.0, 845.0, 844.0, 843.0, 842.0, 841.0, 840.0, 839.0, 838.0, 837.0, 836.0, 835.0, 834.0, 833.0, 832.0, 831.0, 830.0, 829.0, 828.0, 827.0, 826.0, 825.0, 824.0, 823.0, 822.0, 821.0, 820.0, 819.0, 818.0, 817.0, 816.0, 815.0, 814.0, 813.0, 812.0, 811.0, 810.0, 809.0, 808.0, 807.0, 806.0, 805.0, 804.0, 803.0, 802.0, 801.0, 800.0, 799.0, 798.0, 797.0, 796.0, 795.0, 794.0, 793.0, 792.0, 791.0, 790.0, 789.0, 788.0, 787.0, 786.0, 785.0, 784.0, 783.0, 782.0, 781.0, 780.0, 779.0, 778.0, 777.0, 776.0, 775.0, 774.0, 773.0, 772.0, 771.0, 770.0, 769.0, 768.0, 767.0, 766.0, 765.0, 764.0, 763.0, 762.0, 761.0, 760.0, 759.0, 758.0, 757.0, 756.0, 755.0, 754.0, 753.0, 752.0, 751.0, 750.0, 749.0, 748.0, 747.0, 746.0, 745.0, 744.0, 743.0, 742.0, 741.0, 740.0, 739.0, 738.0, 737.0, 736.0, 735.0, 734.0, 733.0, 732.0, 731.0, 730.0, 729.0, 728.0, 727.0, 726.0, 725.0, 724.0, 723.0, 722.0, 721.0, 720.0, 719.0, 718.0, 717.0, 716.0, 715.0, 714.0, 713.0, 712.0, 711.0, 710.0, 709.0, 708.0, 707.0, 706.0, 705.0, 704.0, 703.0, 702.0, 701.0, 700.0, 699.0, 698.0, 697.0, 696.0, 695.0, 694.0, 693.0, 692.0, 691.0, 690.0, 689.0, 688.0, 687.0, 686.0, 685.0, 684.0, 683.0, 682.0, 681.0, 680.0, 679.0, 678.0, 677.0, 676.0, 675.0, 674.0, 673.0, 672.0, 671.0, 670.0, 669.0, 668.0, 667.0, 666.0, 665.0, 664.0, 663.0, 662.0, 661.0, 660.0, 659.0, 658.0, 657.0, 656.0, 655.0, 654.0, 653.0, 652.0, 651.0, 650.0, 649.0, 648.0, 647.0, 646.0, 645.0, 644.0, 643.0, 642.0, 641.0, 640.0, 639.0, 638.0, 637.0, 636.0, 635.0, 634.0, 633.0, 632.0, 631.0, 630.0, 629.0, 628.0, 627.0, 626.0, 625.0, 624.0, 623.0, 622.0, 621.0, 620.0, 619.0, 618.0, 617.0, 616.0, 615.0, 614.0, 613.0, 612.0, 611.0, 610.0, 609.0, 608.0, 607.0, 606.0, 605.0, 604.0, 603.0, 602.0, 601.0, 600.0, 599.0, 598.0, 597.0, 596.0, 595.0, 594.0, 593.0, 592.0, 591.0, 590.0, 589.0, 588.0, 587.0, 586.0, 585.0, 584.0, 583.0, 582.0, 581.0, 580.0, 579.0, 578.0, 577.0, 576.0, 575.0, 574.0, 573.0, 572.0, 571.0, 570.0, 569.0, 568.0, 567.0, 566.0, 565.0, 564.0, 563.0, 562.0, 561.0, 560.0, 559.0, 558.0, 557.0, 556.0, 555.0, 554.0, 553.0, 552.0, 551.0, 550.0, 549.0, 548.0, 547.0, 546.0, 545.0, 544.0, 543.0, 542.0, 541.0, 540.0, 539.0, 538.0, 537.0, 536.0, 535.0, 534.0, 533.0, 532.0, 531.0, 530.0, 529.0, 528.0, 527.0, 526.0, 525.0, 524.0, 523.0, 522.0, 521.0, 520.0, 519.0, 518.0, 517.0, 516.0, 515.0, 514.0, 513.0, 512.0, 511.0, 510.0, 509.0, 508.0, 507.0, 506.0, 505.0, 504.0, 503.0, 502.0, 501.0, 500.0, 499.0, 498.0, 497.0, 496.0, 495.0, 494.0, 493.0, 492.0, 491.0, 490.0, 489.0, 488.0, 487.0, 486.0, 485.0, 484.0, 483.0, 482.0, 481.0, 480.0, 479.0, 478.0, 477.0, 476.0, 475.0, 474.0, 473.0, 472.0, 471.0, 470.0, 469.0, 468.0, 467.0, 466.0, 465.0, 464.0, 463.0, 462.0, 461.0, 460.0, 459.0, 458.0, 457.0, 456.0, 455.0, 454.0, 453.0, 452.0, 451.0, 450.0, 449.0, 448.0, 447.0, 446.0, 445.0, 444.0, 443.0, 442.0, 441.0, 440.0, 439.0, 438.0, 437.0, 436.0, 435.0, 434.0, 433.0, 432.0, 431.0, 430.0, 429.0, 428.0, 427.0, 426.0, 425.0, 424.0, 423.0, 422.0, 421.0, 420.0, 419.0, 418.0, 417.0, 416.0, 415.0, 414.0, 413.0, 412.0, 411.0, 410.0, 409.0, 408.0, 407.0, 406.0, 405.0, 404.0, 403.0, 402.0, 401.0, 400.0, 399.0, 398.0, 397.0, 396.0, 395.0, 394.0, 393.0, 392.0, 391.0, 390.0, 389.0, 388.0, 387.0, 386.0, 385.0, 384.0, 383.0, 382.0, 381.0, 380.0, 379.0, 378.0, 377.0, 376.0, 375.0, 374.0, 373.0, 372.0, 371.0, 370.0, 369.0, 368.0, 367.0, 366.0, 365.0, 364.0, 363.0, 362.0, 361.0, 360.0, 359.0, 358.0, 357.0, 356.0, 355.0, 354.0, 353.0, 352.0, 351.0, 350.0, 349.0, 348.0, 347.0, 346.0, 345.0, 344.0, 343.0, 342.0, 341.0, 340.0, 339.0, 338.0, 337.0, 336.0, 335.0, 334.0, 333.0, 332.0, 331.0, 330.0, 329.0, 328.0, 327.0, 326.0, 325.0, 324.0, 323.0, 322.0, 321.0, 320.0, 319.0, 318.0, 317.0, 316.0, 315.0, 314.0, 313.0, 312.0, 311.0, 310.0, 309.0, 308.0, 307.0, 306.0, 305.0, 304.0, 303.0, 302.0, 301.0, 300.0, 299.0, 298.0, 297.0, 296.0, 295.0, 294.0, 293.0, 292.0, 291.0, 290.0, 289.0, 288.0, 287.0, 286.0, 285.0, 284.0, 283.0, 282.0, 281.0, 280.0, 279.0, 278.0, 277.0, 276.0, 275.0, 274.0, 273.0, 272.0, 271.0, 270.0, 269.0, 268.0, 267.0, 266.0, 265.0, 264.0, 263.0, 262.0, 261.0, 260.0, 259.0, 258.0, 257.0, 256.0, 255.0, 254.0, 253.0, 252.0, 251.0, 250.0, 249.0, 248.0, 247.0, 246.0, 245.0, 244.0, 243.0, 242.0, 241.0, 240.0, 239.0, 238.0, 237.0, 236.0, 235.0, 234.0, 233.0, 232.0, 231.0, 230.0, 229.0, 228.0, 227.0, 226.0, 225.0, 224.0, 223.0, 222.0, 221.0, 220.0, 219.0, 218.0, 217.0, 216.0, 215.0, 214.0, 213.0, 212.0, 211.0, 210.0, 209.0, 208.0, 207.0, 206.0, 205.0, 204.0, 203.0, 202.0, 201.0, 200.0, 199.0, 198.0, 197.0, 196.0, 195.0, 194.0, 193.0, 192.0, 191.0, 190.0, 189.0, 188.0, 187.0, 186.0, 185.0, 184.0, 183.0, 182.0, 181.0, 180.0, 179.0, 178.0, 177.0, 176.0, 175.0, 174.0, 173.0, 172.0, 171.0, 170.0, 169.0, 168.0, 167.0, 166.0, 165.0, 164.0, 163.0, 162.0, 161.0, 160.0, 159.0, 158.0, 157.0, 156.0, 155.0, 154.0, 153.0, 152.0, 151.0, 150.0, 149.0, 148.0, 147.0, 146.0, 145.0, 144.0, 143.0, 142.0, 141.0, 140.0, 139.0, 138.0, 137.0, 136.0, 135.0, 134.0, 133.0, 132.0, 131.0, 130.0, 129.0, 128.0, 127.0, 126.0, 125.0, 124.0, 123.0, 122.0, 121.0, 120.0, 119.0, 118.0, 117.0, 116.0, 115.0, 114.0, 113.0, 112.0, 111.0, 110.0, 109.0, 108.0, 107.0, 106.0, 105.0, 104.0, 103.0, 102.0, 101.0, 100.0, 99.0, 98.0, 97.0, 96.0, 95.0, 94.0, 93.0, 92.0, 91.0, 90.0, 89.0, 88.0, 87.0, 86.0, 85.0, 84.0, 83.0, 82.0, 81.0, 80.0, 79.0, 78.0, 77.0, 76.0, 75.0, 74.0, 73.0, 72.0, 71.0, 70.0, 69.0, 68.0, 67.0, 66.0, 65.0, 64.0, 63.0, 62.0, 61.0, 60.0, 59.0, 58.0, 57.0, 56.0, 55.0, 54.0, 53.0, 52.0, 51.0, 50.0, 49.0, 48.0, 47.0, 46.0, 45.0, 44.0, 43.0, 42.0, 41.0, 40.0, 39.0, 38.0, 37.0, 36.0, 35.0, 34.0, 33.0, 32.0, 31.0, 30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]
# error_pred_array
# [233.73621826171876, 232.76614990234376, 232.04132690429688, 231.273193359375, 229.15783081054687, 221.4592041015625, 215.25283813476562, 210.63145751953124, 209.96209106445312, 211.78107299804688, 213.3647216796875, 215.6461181640625, 215.2598083496094, 214.700634765625, 214.26798095703126, 213.36292114257813, 213.4515625, 215.05569458007812, 217.331298828125, 217.8596435546875, 216.78660888671874, 212.75181274414064, 213.2952392578125, 222.71567993164064, 234.3091247558594, 232.69078979492187, 224.5970886230469, 217.66658935546874, 212.45778198242186, 213.05860595703126, 220.47390747070312, 221.4851867675781, 222.330078125, 218.81192626953126, 211.65349731445312, 211.9800598144531, 212.4668762207031, 216.3446838378906, 218.7637145996094, 221.88330688476563, 219.53104248046876, 210.12131958007814, 205.59589233398438, 207.935009765625, 222.83987426757812, 226.16697998046874, 229.0124267578125, 228.08814086914063, 223.25645751953124, 216.60152587890624, 217.27721557617187, 221.80505981445313, 207.17865600585938, 197.1079833984375, 194.3415100097656, 195.0280334472656, 179.996826171875, 171.78228759765625, 184.22271728515625, 184.91537475585938, 189.92159423828124, 193.85167846679687, 194.59673461914062, 185.61871337890625, 186.15867919921874, 197.231494140625, 197.429345703125, 198.5843994140625, 203.1926025390625, 215.23788452148438, 209.32833862304688, 205.5349548339844, 199.4323303222656, 203.71276245117187, 212.7255126953125, 215.09335327148438, 215.57877197265626, 213.62763671875, 212.81029052734374, 214.99459838867188, 221.76080932617188, 227.79724731445313, 231.9120361328125, 235.12252807617188, 236.53118896484375, 234.948486328125, 234.80711059570314, 241.49258422851562, 246.1890441894531, 245.33095092773436, 244.63858642578126, 243.39429931640626, 238.80361938476562, 237.62827758789064, 233.25220947265626, 228.119921875, 223.1624267578125, 225.0426452636719, 223.72459716796874, 227.86874389648438, 228.27218017578124, 234.23276977539064, 237.84694213867186, 241.2215576171875, 246.16244506835938, 251.892041015625, 252.239013671875, 251.4005859375, 257.07057495117186, 266.0577331542969, 261.8092529296875, 255.71029663085938, 245.6339538574219, 236.8604736328125, 241.89623413085937, 234.8349853515625, 231.0574157714844, 229.8353759765625, 241.38034057617188, 246.75062866210936, 245.16345825195313, 248.460791015625, 246.16755065917968, 242.96047973632812, 248.20276794433593, 257.44920959472654, 262.72228088378904, 266.2411743164063, 271.84559631347656, 268.2837615966797, 265.2854705810547, 268.4452819824219, 275.1179260253906, 273.9887237548828, 267.0797119140625, 262.48084411621096, 258.7828338623047, 251.46455993652344, 241.17965393066407, 232.41156005859375, 226.20226135253907, 215.94066162109374, 217.9768798828125, 212.27077026367186, 205.8636962890625, 198.87208251953126, 190.6219970703125, 185.645263671875, 191.79407958984376, 191.3667419433594, 190.54924926757812, 185.63843383789063, 185.94244995117188, 200.1991180419922, 213.9168731689453, 215.88089294433593, 222.49326782226564, 223.22942504882812, 212.67758178710938, 203.14270935058593, 219.10111389160156, 227.6530303955078, 229.3610046386719, 236.17393798828124, 226.52357482910156, 217.2952453613281, 215.27081298828125, 223.78135986328124, 219.50808410644532, 210.87273254394532, 216.84405517578125, 215.55770874023438, 214.44686889648438, 215.44634094238282, 223.4820129394531, 227.50786437988282, 231.4711151123047, 239.50312194824218, 247.1863586425781, 244.88663024902343, 241.94760437011718, 250.290673828125, 255.40757751464844, 249.79248657226563, 246.96652526855468, 246.89203186035155, 241.28521118164062, 232.0681365966797, 225.88723754882812, 224.53907775878906, 223.1708190917969, 218.8315399169922, 220.51925659179688, 218.53673706054687, 212.88270568847656, 208.50631103515624, 196.84372253417968, 197.86355590820312, 208.2471466064453, 205.16092529296876, 203.83441162109375, 193.1256866455078, 193.9606903076172, 197.89990234375, 204.6542755126953, 207.60321350097655, 207.74706420898437, 208.9096466064453, 201.6711639404297, 186.92813720703126, 194.31505432128907, 191.9890625, 201.93884887695313, 205.2461151123047, 197.86788940429688, 196.78824157714843, 192.51210327148436, 190.39032897949218, 185.5568054199219, 193.18136291503907, 194.79654235839843, 191.76464233398437, 190.26378784179687, 195.44147033691405, 204.4558532714844, 201.2634704589844, 204.83587036132812, 213.10671997070312, 212.9345458984375, 199.34640197753907, 202.27456665039062, 206.24028625488282, 208.20528869628907, 206.5513153076172, 201.33132934570312, 196.26217346191407, 192.4618408203125, 189.14791870117188, 184.34476623535156, 186.2701385498047, 186.78043518066406, 184.6370361328125, 183.78864135742188, 184.10240173339844, 179.90760498046876, 178.21352844238282, 173.25917358398436, 174.4719665527344, 176.7918273925781, 181.72181701660156, 181.85034790039063, 174.9049285888672, 174.00490112304686, 167.60903625488282, 174.0874053955078, 176.48806457519532, 176.81559143066406, 184.5586151123047, 181.32671508789062, 175.43594665527343, 170.5407287597656, 177.01039123535156, 178.24416809082032, 173.92434387207032, 180.57322998046874, 180.79768981933594, 174.24561462402343, 168.8147766113281, 163.38417358398436, 169.5365234375, 178.01719360351564, 182.66878356933594, 182.48989868164062, 180.5145294189453, 180.764208984375, 178.65867919921874, 182.91073608398438, 180.33968505859374, 187.1057373046875, 200.9744903564453, 201.9693115234375, 193.01897277832032, 194.0814697265625, 200.97994689941407, 195.69361267089843, 191.03187255859376, 186.92322387695313, 189.60736389160155, 193.40784606933593, 191.84534912109376, 191.17209167480468, 189.28182678222657, 185.15109558105468, 176.9284240722656, 174.05978088378907, 174.06060791015625, 175.0039093017578, 178.68993225097657, 183.21029968261718, 182.66588439941407, 182.5064483642578, 185.6112274169922, 192.3707244873047, 197.41182861328124, 200.9964172363281, 202.85869750976562, 198.55019836425782, 194.34200134277344, 191.38255310058594, 193.10970153808594, 187.3966491699219, 183.93302001953126, 182.53139038085936, 176.80912170410156, 170.548828125, 164.7770751953125, 165.0722198486328, 165.1385040283203, 164.77529602050782, 161.9061309814453, 166.07931213378907, 163.79566345214843, 158.81371154785157, 155.41865234375, 161.50340270996094, 176.5304718017578, 182.17355651855468, 177.3363250732422, 170.7026123046875, 166.61871643066405, 169.40050048828124, 174.3066650390625, 179.65306091308594, 187.9072265625, 192.05129699707032, 194.43101806640624, 195.97434997558594, 187.0048858642578, 179.8050079345703, 174.69986267089843, 173.5043182373047, 171.0877685546875, 168.07650451660157, 167.8123352050781, 172.30667419433593, 176.932080078125, 182.08460998535156, 185.27884521484376, 182.38133239746094, 177.95763244628907, 175.92099304199218, 178.78312072753906, 174.3278839111328, 171.9819793701172, 172.83084411621093, 168.51559448242188, 163.4302490234375, 158.32210388183594, 164.42383422851563, 163.76436462402344, 162.82095642089843, 159.17884216308593, 160.86205444335937, 157.32877197265626, 152.5048400878906, 147.91437683105468, 152.4788391113281, 148.64852600097657, 147.52467041015626, 153.27680053710938, 152.26719970703124, 139.43399047851562, 134.12795715332032, 136.49643249511718, 137.9797607421875, 142.45810241699218, 143.8839141845703, 151.4748748779297, 153.24180603027344, 146.67862854003906, 143.96385192871094, 141.93671569824218, 144.51954956054686, 157.751806640625, 158.2719299316406, 156.02521057128905, 148.73178100585938, 144.617431640625, 156.35982971191407, 158.80450439453125, 158.39053955078126, 158.0891571044922, 161.49912719726564, 159.7821533203125, 155.81775817871093, 155.7190734863281, 156.77895812988282, 160.3724334716797, 160.91116027832032, 158.63127746582032, 155.0868927001953, 154.2619171142578, 155.50168151855468, 155.68963928222655, 153.16039428710937, 154.50732421875, 154.35923461914064, 152.77266540527344, 151.35987548828126, 156.7992950439453, 161.06217346191406, 161.36721496582032, 161.94993896484374, 163.9277130126953, 161.93343505859374, 157.8072265625, 154.56112976074218, 155.04473876953125, 152.20628967285157, 150.79471130371093, 145.0475616455078, 140.6997039794922, 132.11312866210938, 125.624462890625, 126.35753479003907, 134.25670776367187, 131.01214904785155, 136.78537139892578, 136.81344299316407, 133.3283905029297, 132.26623992919923, 130.65589599609376, 136.9246368408203, 139.54189453125, 144.9328399658203, 153.26893615722656, 153.50267639160157, 147.85724639892578, 142.19910430908203, 138.47337951660157, 139.64275054931642, 135.33780822753906, 132.4083984375, 133.09209899902345, 134.61085815429686, 132.30168762207032, 125.67577209472657, 120.37588806152344, 125.01250915527343, 128.0292495727539, 127.76764526367188, 122.94951782226562, 116.61193542480468, 113.28773803710938, 113.93735961914062, 114.61090393066407, 111.75779724121094, 111.38736877441406, 108.08814392089843, 108.19627380371094, 109.85728149414062, 107.31764526367188, 105.5768310546875, 109.69436798095703, 111.51382293701172, 112.5979736328125, 110.74620056152344, 109.8630584716797, 116.91919555664063, 117.60198059082032, 116.52388000488281, 118.29540252685547, 116.31922302246093, 114.3239974975586, 112.67129821777344, 110.73300170898438, 109.02839813232421, 108.61811065673828, 104.9126968383789, 97.7381820678711, 94.55225372314453, 93.02432250976562, 92.59966430664062, 92.38526916503906, 90.25654602050781, 88.98030090332031, 88.92020568847656, 87.37965393066406, 88.55746765136719, 89.07707214355469, 90.63760375976562, 88.98282470703126, 87.84288940429687, 87.88786010742187, 88.68302001953126, 87.36397399902344, 84.32302551269531, 80.9555450439453, 86.64249267578126, 89.95148315429688, 87.45168762207031, 82.36541137695312, 84.05504150390625, 83.30889892578125, 85.019677734375, 84.26567077636719, 86.41275634765626, 85.39352569580078, 82.98197021484376, 80.72621154785156, 82.84837799072265, 82.62501068115235, 81.88328399658204, 81.8044448852539, 80.72386169433594, 79.49248809814453, 76.53971862792969, 79.46505889892578, 78.3675323486328, 78.34935302734375, 76.96156311035156, 77.34117736816407, 75.96818542480469, 73.335205078125, 71.61273498535157, 74.01110382080078, 73.11777191162109, 74.51119995117188, 71.98056335449219, 65.82232971191407, 66.2762451171875, 65.81289367675781, 68.19395141601562, 65.83837585449218, 63.117140197753905, 61.89197998046875, 62.73060760498047, 64.42098999023438, 64.37947998046874, 65.60719299316406, 67.49692077636719, 65.78528289794922, 63.58561553955078, 62.13142700195313, 60.60595703125, 59.766787719726565, 58.883984375, 57.30829620361328, 59.08920440673828, 59.0684326171875, 57.679693603515624, 57.20458831787109, 57.53780975341797, 56.023947143554686, 55.80469665527344, 56.35388031005859, 57.18438568115234, 57.9048568725586, 54.87735137939453, 51.91768035888672, 52.530068969726564, 51.348812866210935, 52.17709503173828, 52.36663818359375, 55.50587463378906, 56.02353057861328, 53.571249389648436, 54.148179626464845, 56.76649780273438, 56.189141845703126, 56.47757263183594, 61.428280639648435, 63.019264221191406, 59.6216796875, 54.441157531738284, 55.342864990234375, 56.342218017578126, 61.31925048828125, 61.822427368164064, 59.09760284423828, 58.407554626464844, 58.50985107421875, 56.70051879882813, 56.321722412109374, 56.04762420654297, 59.20051879882813, 61.881831359863284, 64.89915313720704, 64.51047058105469, 64.26976470947265, 68.74510955810547, 66.58922729492187, 63.839630126953125, 61.76357879638672, 59.48664245605469, 52.88997192382813, 46.10159912109375, 46.23700103759766, 49.479364013671876, 47.371514892578126, 47.381744384765625, 46.69851226806641, 46.89303436279297, 47.938482666015624, 50.702326965332034, 47.73002166748047, 47.77621307373047, 51.28431243896485, 57.413873291015626, 54.15601654052735, 50.25373840332031, 49.57619171142578, 57.22374725341797, 60.86728210449219, 59.98575286865234, 55.82243957519531, 58.50211944580078, 58.55494079589844, 55.330178833007814, 48.20941162109375, 51.80338897705078, 58.43488311767578, 62.527601623535155, 61.19282989501953, 61.321380615234375, 61.21528778076172, 58.71910095214844, 51.55500030517578, 51.87752990722656, 52.85875701904297, 57.601783752441406, 62.62952728271485, 60.65586395263672, 56.50494232177734, 55.70552520751953, 54.97120056152344, 57.27282867431641, 58.620828247070314, 62.81276397705078, 63.73394775390625, 59.90816955566406, 56.421939086914065, 57.23741607666015, 56.72869720458984, 58.483587646484374, 60.15382080078125, 63.836961364746095, 60.4486328125, 54.37204284667969, 56.57389526367187, 57.1586181640625, 54.02117004394531, 50.57855377197266, 51.807168579101564, 55.31989288330078, 53.888807678222655, 49.20870666503906, 49.310951232910156, 50.26485900878906, 51.3700927734375, 51.216427612304685, 47.57576446533203, 42.84201202392578, 41.46237030029297, 46.78870391845703, 47.46685028076172, 43.332177734375, 38.19630126953125, 37.24781494140625, 38.615866088867186, 38.982643127441406, 39.59981689453125, 42.02662811279297, 40.78079833984375, 39.22053527832031, 36.79718780517578, 35.97910614013672, 39.413998413085935, 39.20321197509766, 40.79789733886719, 42.06519470214844, 44.94947052001953, 40.00185089111328, 39.87420654296875, 39.187303161621095, 40.427433776855466, 40.27087249755859, 41.85726470947266, 38.793801879882814, 38.991084289550784, 38.478085327148435, 38.97046661376953, 35.40807189941406, 35.55740509033203, 34.08680877685547, 31.872640991210936, 33.4380615234375, 34.355455017089845, 34.17203216552734, 33.275091552734374, 33.06853332519531, 32.15201263427734, 32.58553924560547, 32.33357238769531, 30.16300735473633, 32.76860733032227, 32.82425994873047, 31.507886505126955, 32.14586410522461, 34.305989837646486, 33.7050666809082, 32.89646759033203, 30.69223098754883, 27.38671417236328, 26.277545928955078, 28.165279388427734, 27.590791320800783, 26.548894500732423, 28.413249969482422, 29.671510314941408, 26.79346160888672, 24.551146697998046, 24.698855590820312, 25.350038909912108, 28.672476959228515, 30.033524322509766, 28.730714416503908, 27.22966079711914, 26.4642692565918, 24.586326599121094, 25.745311737060547, 26.704805755615233, 29.196155548095703, 26.380724334716795, 27.285682678222656, 28.821355438232423, 27.174435424804688, 25.629964447021486, 23.701654815673827, 25.37286376953125, 26.342017364501952, 26.061138153076172, 24.75322265625, 25.40284957885742, 24.67076416015625, 24.642374420166014, 24.73909912109375, 27.868128967285156, 28.38462677001953, 26.244815063476562, 27.01693344116211, 28.30866241455078, 27.28201675415039, 26.62985153198242, 25.89431381225586, 25.431398010253908, 27.586854553222658, 28.043850708007813, 29.438983917236328, 32.64683227539062, 32.34921035766602, 31.609438323974608, 33.73126907348633, 34.89558715820313, 35.83146667480469, 34.6866455078125, 35.574781036376955, 36.790505981445314, 37.74914321899414, 36.21039657592773, 38.10196228027344, 39.14063720703125, 42.482018280029294, 40.816192626953125, 40.5820930480957, 41.84001159667969, 44.464175415039065, 44.00750198364258, 40.841741943359374, 39.0741943359375, 42.09846878051758, 45.46841201782227, 43.88251647949219, 44.33492736816406, 49.29881973266602, 47.06992034912109, 42.850965881347655, 45.71634750366211, 45.124392700195315, 47.376913452148436, 50.91760940551758, 34.810140228271486, 23.185843658447265, 23.365017700195313, 22.318406677246095, 22.324717712402343, 22.330617141723632, 25.753804397583007, 24.293913269042967, 27.878487014770506, 27.801503372192382, 29.51559829711914, 28.609791946411132, 24.92127571105957, 21.921529388427736, 22.533114624023437, 25.3783935546875, 24.87556610107422, 24.141765213012697, 22.750718688964845, 21.66647415161133, 24.487873840332032, 24.498975944519042, 24.345964241027833, 24.353329849243163, 25.44840030670166, 25.865285301208495, 24.979733085632326, 26.80478439331055, 28.878277015686034, 27.78145866394043, 25.218845939636232, 23.394370079040527, 22.409227752685545, 21.510893058776855, 18.86921329498291, 16.777799797058105, 15.260125732421875, 14.627598762512207, 13.9902738571167, 13.53182315826416, 13.282184982299805, 12.56845645904541, 12.30984287261963, 9.55405387878418, 9.017498016357422, 9.4084867477417, 8.900893020629884, 8.063765716552734, 8.49095802307129, 8.542118072509766, 9.10329990386963, 8.925061988830567, 8.43088207244873, 9.499856948852539, 9.32634391784668, 10.542783546447755, 9.428791809082032, 9.840045928955078, 9.504936408996581, 8.385100173950196, 9.093200874328613, 11.566422653198241, 11.886865997314453, 10.639815998077392, 8.504233264923096, 7.435840892791748, 7.13827543258667, 7.227834033966064, 7.4304811477661135, 7.944094562530518, 8.252573490142822, 8.868411827087403, 9.426864433288575, 9.794993209838868, 10.035904884338379, 9.987264156341553, 9.872835445404053, 10.116108655929565, 10.191609001159668, 10.988156032562255, 11.688128566741943, 11.951312589645386, 12.651931190490723, 12.974178457260132]


for FD in [1]: ######['1','2','3','4']
    # if max_life==110 and FD=='1':
    #     continue
    # if max_life==110 and FD=='2':
        # continue
    
    FD_feature_columns=[]
 











    method_name='grid_FD{}_TaFCN_npseed{}_segment_{}'.format(FD,seed,segment)
    # method_name='FCN_RUL_1out_train_split_test'
    dataset='cmapssd'
    
    
    def unbalanced_penalty_score_1out(Y_test,Y_pred) :
          
        s=0    
        for i in range(len(Y_pred)):
            if Y_pred[i]>Y_test[i]:
                s=s+math.exp((Y_pred[i]-Y_test[i])/10)-1
            else:
                s=s+math.exp((Y_test[i]-Y_pred[i])/13)-1    
        print('unbalanced_penalty_score{}'.format(s))
        return s  
      
    def error_range_1out(Y_test,Y_pred) :           
        error_range=(Y_test-Y_pred).min(),(Y_test-Y_pred).max()
        print('error range{}'.format(error_range))
        return error_range
    
 
    
    X_train=X_train.reshape(X_train.shape[0],X_train.shape[1],1,1)
    
    X_test=X_test.reshape(X_test.shape[0],X_train.shape[1],1,1)
    
    # x_train_array , y_train_array , x_test_array ,  y_test_array=get_input_out_2(CS2_36,CS2_37,20)   

    
    
    import six
    
    import keras.backend as K
    from keras.utils.generic_utils import deserialize_keras_object
    from keras.utils.generic_utils import serialize_keras_object
    from tensorflow.python.ops import math_ops
    from tensorflow.python.util.tf_export import tf_export
    
    
    
    
    
    from tensorflow.python.ops import math_ops
    

    

    
    
    #########np.greater_equal([4, 2, 1], [2, 2, 2])array([ True, True, False])
    #############tf.cast( ) 或者K.cast( ) 是执行 tensorflow 中的张量数据类型转换，比如读入的图片是int8类型的，一定要在训练的时候把图片的数据格式转换为float32.
    
    ################reduce_sum reduce dimensinality and get sum


    

            #return inputs*x   
    

    
    


    # reshape_size=len(FD_feature_columns)*int((sequence_length/3))
    def FCN_model():
    #    in0 = keras.Input(shape=(sequence_length,train_feature_slice.shape[1]))  # shape: (batch_size, 3, 2048)
    #    in0_shaped= keras.layers.Reshape((train_feature_slice.shape[1],sequence_length,1))(in0)   
    
        in0 = keras.Input(shape=(X_train.shape[1],X_train.shape[2],X_train.shape[3]),name='layer_13')  # shape: (batch_size, 3, 2048)
    #    begin_senet=SeBlock()(in0)
        x = keras.layers.AveragePooling2D(pool_size=(int(sequence_length/segment), 1), strides=int(sequence_length/segment),name='layer_12')(in0)
        # x = keras.layers.Reshape((-1,1))(x) 
        
        # x = keras.layers.Reshape((len(FD_feature_columns)*int((sequence_length/3)),))(x)             
        x = keras.layers.Reshape((-1,))(x)               
        # x = keras.layers.GlobalAveragePooling2D()(in0)
        x = keras.layers.Dense(1, use_bias=False,activation=keras.activations.relu)(x)
        kernel = keras.layers.Dense(1, use_bias=False,activation=keras.activations.hard_sigmoid,name='layer_11')(x)
        begin_senet= keras.layers.Multiply(name='layer_10')([in0,kernel])    #给通道加权重
     
    
       
    
    #     conv0 = keras.layers.
        
        
        conv0 = keras.layers.Conv2D(num_filter1, kernel1_size, strides=1, padding='same',name='layer_9')(begin_senet)
        conv0 = keras.layers.BatchNormalization()(conv0)
        conv0 = keras.layers.Activation('relu',name='layer_8')(conv0)
        
    #    conv0 = keras.layers.Dropout(dropout)(conv0)
        conv0 = keras.layers.Conv2D(num_filter2, kernel2_size, strides=1, padding='same',name='layer_7')(conv0)
        conv0 = keras.layers.BatchNormalization()(conv0)
        conv0 = keras.layers.Activation('relu',name='layer_6')(conv0)
        
    #    conv0 = keras.layers.Dropout(dropout)(conv0)
        conv0 = keras.layers.Conv2D(num_filter3, kernel3_size, strides=1, padding='same',name='layer_5')(conv0)
        conv0 = keras.layers.BatchNormalization()(conv0)
        conv0 = keras.layers.Activation('relu',name='layer_4')(conv0)
        conv0 = keras.layers.GlobalAveragePooling2D(name='layer_3')(conv0)
        conv0 = keras.layers.Dense(64, activation='relu',name='layer_2')(conv0)
        out = keras.layers.Dense(1, activation='relu',name='layer_1')(conv0)
    
        
        
    
    
    
        model = keras.models.Model(inputs=in0, outputs=[out])    
    
        return model
    
    
    # ##############shuaffle the data
    np.random.seed(seed)
    index=np.arange(X_train.shape[0])
    np.random.shuffle(index,)
    
     
    X_train=X_train[index]#X_train是训练集，y_train是训练标签
    Y_train=Y_train[index]
    
    #X_train, Xtest, Y_train, ytest = train_test_split(X_train, Y_train, test_size=0.7, random_state=0)
    
    
    if __name__ == '__main__':
    
        error_record=[]
        index_record=[]
        unbalanced_penalty_score_record=[]
        error_range_left_record=[]
        error_range_right_record=[]
        index_min_val_loss_record,min_val_loss_record=[],[]
        
        if os.path.exists(r"F:\桌面11.17\project\RUL\experiments_result\method_error_txt\{}.txt".format(method_name)):os.remove(r"F:\桌面11.17\project\RUL\experiments_result\method_error_txt\{}.txt".format(method_name))
    
     
    

    
        rul_pred_array_list=[]
        true_out_array_list=[]          
        error_pred_array_list=[]
                    
    #######             single  output                
    
        for i in range(run_times):
            print('xxx')
 
            model=FCN_model()
            plot_model(model, to_file=r"F:\桌面11.17\project\RUL\Flatten.png", show_shapes=True)#########to_file='Flatten.png',r"F:\桌面11.17\project\RUL\model\FCN_RUL_1out_train_valid_test\{}.h5
            
            optimizer = keras.optimizers.Adam()
            model.compile(loss='mse',#loss=root_mean_squared_error,
                          optimizer=optimizer,
                          metrics=[root_mean_squared_error])
             
            reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor = 'loss', factor=0.5,
                              patience=patience_reduce_lr, min_lr=0.0001) 
            

    #                  verbose=1, validation_split=VALIDATION_SPLIT, callbacks = [reduce_lr])   
            model_name='{}_dataset_{}_log{}_time{}'.format(method_name,dataset,i,datetime.datetime.now().strftime('%Y%m%d%H%M%S'))
            earlystopping=keras.callbacks.EarlyStopping(monitor='loss',patience=patience,verbose=1)
            modelcheckpoint=keras.callbacks.ModelCheckpoint(monitor='loss',filepath=r"F:\桌面11.17\project\RUL\model\FCN_RUL_1out_train_valid_test\{}.h5".format(model_name),save_best_only=True,verbose=1)
            hist = model.fit(X_train, Y_train, batch_size=batch_size, epochs=nb_epochs,
                      verbose=1, validation_data=(X_test, Y_test), callbacks = [reduce_lr,earlystopping,modelcheckpoint])   
    #        hist = model.fit(X_train, Y_train, batch_size=batch_size, epochs=nb_epochs,
    #                  verbose=1, validation_data=(X_test, Y_test), callbacks = [reduce_lr,earlystopping,modelcheckpoint])   
            log = pd.DataFrame(hist.history)
            log.to_excel(r"F:\桌面11.17\project\RUL\experiments_result\log\{}_dataset_{}_log{}_time{}.xlsx".format(method_name,dataset,i,datetime.datetime.now().strftime('%Y%m%d%H%M%S')))
            
            print(hist.history.keys())
            epochs=range(len(hist.history['loss']))
            plt.figure()
            plt.plot(epochs,hist.history['loss'],'b',label='Training loss')
            plt.plot(epochs,hist.history['val_loss'],'r',label='Validation val_loss')
            plt.title('Traing and Validation loss')
            plt.legend()
            plt.show()

    
            
    #        model=keras.models.load_model(r"F:\桌面11.17\project\RUL\model\FCN_RUL_1out_train_valid_test\{}.h5".format(model_name),custom_objects={'root_mean_squared_error': root_mean_squared_error,'Smooth':Smooth,'SeBlock':SeBlock})
            model=keras.models.load_model(r"F:\桌面11.17\project\RUL\model\FCN_RUL_1out_train_valid_test\{}.h5".format(model_name),custom_objects={'root_mean_squared_error': root_mean_squared_error})
            for layer in model.layers:
                layer.trainable=False        
    #        score = model.evaluate(X_test, Y_test)  ############forbid evaluate!!!!!!!!!!!!!!!!!!
    #        print('score[1]:{}'.format(score[1]))    ############forbid evaluate!!!!!!!!!!!!!!!!!!    
            
            Y_pred=model.predict(X_test)
    #        rmse=root_mean_squared_error(Y_test,Y_pred)
    #        with tf.Session() as sess:
    #            print(rmse.eval())
            rmse_value=rmse(Y_test,Y_pred)
            # print('rmse:{}'.format(rmse_value))
            

            rul_pred_array=np.array(Y_pred)
            rul_pred_array=rul_pred_array.reshape(rul_pred_array.shape[0])
            
            # print(rul_pred_array.shape)
            
            true_out_array=np.array(Y_test)
            
            error_pred_array=rul_pred_array-true_out_array
            
            error_pred_array=np.maximum(error_pred_array, -error_pred_array)
                # print(sol.x)
                
            # print(error_pred_array.sum())
            # print("xxxxx")
            # print(error_pred_array)
                
                
            fig, ax = plt.subplots()
            # 在生成的坐标系下画折线图
            ax.plot(error_pred_array, linewidth=1)
            
            
            
            # 显示图形
            plt.show()   
             
            
            # print(i)
            # print("rul_pred_array") 
            # print(list(rul_pred_array))
            # print("true_out_array") 
            # print(list(true_out_array))
            # print("error_pred_array") 
            # print(list(error_pred_array))  
            
            rul_pred_array_list.append(rul_pred_array)
            true_out_array_list.append(true_out_array)            
            error_pred_array_list.append(error_pred_array)
        rul_pred_array=np.mean(rul_pred_array_list,axis=0)
        true_out_array=np.mean(true_out_array_list,axis=0)
        error_pred_array=np.mean(error_pred_array_list,axis=0)


        print(i)
        print("rul_pred_array") 
        print(list(rul_pred_array))
        print("true_out_array") 
        print(list(true_out_array))
        print("error_pred_array") 
        print(list(error_pred_array))  




 