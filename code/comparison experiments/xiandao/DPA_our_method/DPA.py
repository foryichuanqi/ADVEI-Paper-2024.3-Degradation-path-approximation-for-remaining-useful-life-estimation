# -*- coding: utf-8 -*-
"""
Created on Mon Mar 20 16:46:05 2023

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Sun Mar 19 22:07:49 2023

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Sun Mar 19 20:41:41 2023

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Sat Mar 18 13:04:56 2023

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Mon Aug  1 16:49:17 2022

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Mon Aug  1 16:26:02 2022

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Mon Aug  1 14:28:22 2022

@author: Administrator
"""
# -*- coding: utf-8 -*-
"""
Created on Sun Jul 31 18:17:31 2022

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Sat Jul 30 14:50:53 2022

@author: Administrator
"""

# -*- coding: utf-8 -*-
"""
Created on Thu Jul 28 14:55:56 2022

@author: Administrator

"""



import xlrd

import matplotlib.pyplot as plt

import numpy as np

from scipy.optimize import minimize, rosen, rosen_der

from scipy.stats import linregress


shed=-175


import numpy as np
import pandas as pd
import os
import pickle
import scipy as sp
import datetime


import numpy as np

import scipy as sp

import math

from numpy import matmul as mm
from math import sqrt,pi,log, exp

import xlrd

import matplotlib.pyplot as plt

import numpy as np

from scipy.optimize import minimize, rosen, rosen_der

from scipy.stats import linregress

from scipy.stats import norm


import scipy.io as scio




print(os.path.abspath(os.path.join(os.getcwd(), "../..")))
last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../.."))

print(os.path.abspath(os.path.join(os.getcwd(), "..")))
last_path=os.path.abspath(os.path.join(os.getcwd(), ".."))

print(os.path.abspath(os.path.join(os.getcwd(), "../../..")))
last_last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../../.."))


print(os.path.abspath(os.path.join(os.getcwd(), "../../../..")))
last_last_last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../../../.."))





def get_data_list():

    
 
    CS2_35=[39.6435188,41.73550651,43.70386749,45.59752512,47.44376057,49.22414953,50.94063898,52.59512744,54.18946618,55.72546025,57.20486968,58.62941047,60.00075568,61.32053643,62.59034292,63.81172539,64.98619508,66.11522516,67.20025165,68.24267429,69.24385741,70.2051308,71.12779051,72.01309967,72.86228928,73.67655898,74.4570778,75.20507849,75.94243447,76.66800439,77.38074463,78.07970525,78.76402602,79.43293254,80.08573257,80.72181228,81.3406328,81.9417267,82.52469474,83.08920252,83.63497739,84.16180538,84.66952821,85.15804041,85.62728657,86.07725857,86.50799299,86.91956854,87.31210365,87.68575403,88.04071039,88.37719619,88.69546552,88.99580098,89.27851166,89.54393124,89.79241606,90.02434336,90.24010948,90.44012824,90.62482925,90.79465641,90.95006638,91.09152714,91.21951663,91.33452138,91.43703525,91.52755821,91.6065952,91.67465492,91.73224887,91.77989023,91.81809293,91.84737073,91.86823627,91.88120029,91.88688229,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.88839744,91.99348548,92.12454651,92.25519913,92.38528194,92.51464058,92.64312776,92.77060337,92.89693457,93.02199582,93.14566892,93.26784304,93.38841476,93.50728797,93.62437397,93.73959135,93.85286598,93.96413095,94.0733265,94.18039996,94.28530563,94.3880047,94.48846517,94.58666168,94.68257544,94.77619407,94.87901865,95.03217647,95.18676599,95.34278076,95.50021455,95.65906133,95.81931527,95.98097074,96.14402231,96.3084647,96.49096621,96.71010318,96.93286811,97.15923479,97.38917506,97.62265881,97.85965413,98.10012733,98.34404302,98.59136424,98.84205245,99.09606759,99.35336831,99.61391177,99.87765393,100.1445496,100.4145523,100.6876147,100.9636882,101.2427235,101.5246703,101.8094774,102.0970931,102.3874649,102.6805395,102.9762632,103.2745819,103.5754409,103.8787851,104.1845593,104.4927078,104.8031748,105.1159044,105.4308406,105.7479272,106.0671083,106.3883279,106.7115303,107.0366596,107.3636608,107.6924786,108.0230583,108.3553457,108.6892868,109.0248284,109.3619176,109.7005022,110.0405307,110.3819523,110.7247168,111.0687749,111.4140781,111.7605789,112.1082306,112.4569874,112.8068047,113.1576388,113.5094471,113.8621881,114.2158217,114.5703086,114.9256111,115.2816925,115.6385177,115.9960525,116.3542646,116.7131227,117.072597,117.4326594,117.793283,118.1544425,118.5161143,118.8782761,119.2409074,119.6039892,119.9675041,120.3314367,120.6957727,121.0604999,121.4256078,121.7910874,122.1569315,122.5231349,122.8896939,123.2566067,123.6238731,123.9914949,124.3594757,124.7278208,125.0965374,125.4656343,125.8351225,126.2050145,126.5753248,126.9460695,127.3172667,127.6889364,128.0611002,128.4337816,128.8070058,129.1807998,129.5551926,129.9302146,130.3058983,130.6822776,131.0593884,131.4372681,131.8159558,132.1954926,132.5759206,132.9572842,133.3396289,133.723002,134.1074524,134.4930303,134.8797876,135.2677775,135.6570549,136.0476757,136.4396975,136.8331792,137.2281807,137.6247635,138.0229903,138.4229246,138.8246317,139.2281774,139.6336288,140.0410542,140.4505224,140.8621036,141.2758687,141.6918894,142.1102381,142.5309883,142.9542136,143.3799888,143.808389,144.2394899,144.6733675,145.1100985,145.5497597,145.9924284,146.4381821,146.8870983,147.3392549,147.7947297,148.2536005,148.7159452,149.1818414,149.6513666,150.124598,150.6016127,151.0824871,151.5672974,152.0561191,152.5490275,153.0460967,153.5474006,154.0530121,154.5630033,155.0774454,155.5964086,156.119962,156.6481737,157.1811105,157.7188382,158.2614209,158.8089216,159.3614017,159.9189212,160.4815383,161.0493096,161.6222903,162.2005332,162.7840897,163.373009,163.9673384,164.5671231,165.1724063]    
         
    CS2_36=[24.21603668,27.76392576,31.05812474,34.11272657,36.94126062,39.55670907,41.97152296,44.19763785,46.24648927,48.12902763,49.85573305,51.43662963,52.88129959,54.19889697,55.39816113,56.48742985,57.47465218,58.36740102,59.17288536,59.89796229,60.54914868,61.13263263,61.65428459,62.11966834,62.53405155,62.90241619,63.22946866,63.51964968,63.77986482,64.02124681,64.24612443,64.45667649,64.6549378,64.84280487,65.02204165,65.19428489,65.36104955,65.52373394,65.68362478,65.84190207,65.99964387,66.15783094,66.31735119,66.47900406,66.64350478,66.81148844,66.983514,67.16006816,67.34156907,67.52837002,67.72076293,67.91898175,68.12320577,68.33356283,68.55013239,68.77294851,69.00200277,69.23724705,69.47859619,69.72593064,69.97909895,70.23792017,70.50218623,70.77166413,71.04609814,71.32521189,71.62235332,72.01186156,72.41093197,72.81906332,73.23573249,73.66039698,74.09249736,74.53145956,74.97669714,75.42761342,75.88360347,76.34405616,76.80835594,77.27588467,77.7460233,78.21815351,78.69165919,79.16592799,79.64035262,80.11433222,80.58727357,81.05859228,81.52771389,81.9940749,82.45712376,82.91632177,83.37114395,83.82107982,84.26563414,84.7043276,85.13669743,85.562298,85.98070136,86.39149766,86.79429563,87.18872298,87.57442667,87.95107329,88.31834924,88.67596103,89.02363537,89.3611194,89.6881807,90.00460745,90.3102084,90.60481293,90.88827096,91.16045296,91.42124983,91.67057279,91.90835323,92.13454258,92.34911212,92.55205274,92.74337473,92.92310751,93.0942088,93.25737267,93.41259973,93.55990377,93.69931161,93.8308629,93.95460987,94.07061711,94.17896129,94.27973097,94.3730263,94.45895874,94.53765081,94.60923579,94.67537072,94.73773813,94.79638462,94.85136201,94.90272718,94.95054198,94.99487308,95.03579181,95.07337407,95.10770016,95.13885463,95.16692615,95.19200739,95.21419481,95.23358857,95.25029236,95.26441323,95.27606148,95.28535047,95.29239651,95.29731865,95.30023858,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.30128046,95.33521881,95.37337294,95.41511465,95.55435079,95.71377564,95.88296678,96.06207811,96.25125625,96.4506404,96.6603623,96.97094911,97.36193722,97.76950693,98.19375769,98.6347772,99.09264146,99.56741468,100.0591493,100.567886,101.0936539,101.6364702,102.1963406,102.7732591,103.3672081,103.9781587,104.6060704,105.2508912,105.9125583,106.5909971,107.2861225,107.997838,108.7260364,109.4706,110.2314,111.0082975,111.8011431,112.6097773,113.4340305,114.2737233,115.1286665,115.9986614,116.8835001,117.7829651,118.6968305,119.6248611,120.5668133,121.5224352,122.4914666,123.4736392,124.4686773,125.4762972,126.4962082,127.5281125,128.5717052,129.6266751,130.6927044,131.7694691,132.8566394,133.9538799,135.0608497,136.1772027,137.3025878,138.4366496,139.5790278,140.7293584,141.8872733,143.0524007,144.2243656,145.4027897,146.587292,147.7774889,148.9729945,150.1734206,151.3783777,152.5874742,153.8003175,155.0165141,156.2356696,157.457389,158.6812774,159.9069395,161.1339807,162.3620068,163.5906241,164.8194404,166.0480645,167.2761068,168.5031796,169.7288971,170.9528758,172.1747347,173.3940956,174.6105832,175.8238256,177.033454,178.2391036,179.4404132,180.6370259,181.828589,183.0147543,184.1951785,185.3695228,186.5374541,187.6986441,188.8527702,189.9995156,191.1385693,192.2696262,193.3923874,194.5065607,195.6118601,196.7080065,197.7947275,198.8717578,199.938839,200.9957205,202.0421585,203.0779171]
            
    CS2_37=[29.10206571,37.72371374,46.30597344,54.85235886,56.62552062,58.36924525,60.0864704,61.77995584,63.99136847,66.1840545,68.36028042,70.5221612,71.42482968,72.3169529,73.20022769,74.07622309,74.94638596,75.81204639,76.67442293,77.53462772,78.06032948,78.58578435,79.1118146,79.63915516,80.16845805,80.70029674,81.23517027,81.7735073,82.31567006,82.86195812,83.41261208,83.96781717,84.43206697,84.90108576,85.37491275,85.85354489,86.33693981,86.82501875,87.3176694,87.81474849,88.31608449,88.82148004,89.33071439,89.84354565,90.3597131,90.87893921,91.40093175,91.92538572,92.45198521,92.98040518,93.51031314,94.04137091,94.57323595,95.10556296,95.63800534,96.17021635,96.70185045,97.23256457,97.76201907,98.28987884,98.81581444,99.33950279,99.86062827,100.3788833,100.799267,101.2161926,101.6293813,102.0385652,102.4434876,102.8439039,103.2395815,103.6303009,104.0158552,104.396051,104.7707085,105.139662,105.5027592,105.8598624,106.2108481,106.5556068,106.8940438,107.2260783,107.5516441,107.8706892,108.1831756,108.4890795,108.788391,109.0811137,109.367265,109.6468755,109.9199887,110.186661,110.4469615,110.7009711,110.9487829,111.1905014,111.3580991,111.5198456,111.6758782,111.8263436,111.9713985,112.1112087,112.2459489,112.3782155,112.5104821,112.6427487,112.7750153,112.9072819,113.0395485,113.1718151,113.3040817,113.4363483,113.5686149,113.7008816,113.8331482,113.9654148,114.0976814,114.229948,114.3622146,114.4944812,114.6267478,114.7590144,114.891281,115.0235477,115.1558143,115.2880809,115.4203475,115.5526141,115.6475159,115.7424177,115.8373195,115.9322214,116.0271232,116.122025,116.2169268,116.3118286,116.4067305,116.5016323,116.5965341,116.6914359,116.7863377,116.8812396,116.9761414,117.0710432,117.165945,117.2608468,117.3557486,117.4506505,117.5455523,117.6404541,117.735356,117.8302578,117.9251596,118.0200614,118.1149632,118.209865,118.3047668,118.3996687,118.4945705,118.5894723,118.7430791,118.8966859,119.0502928,119.2038996,119.3575064,119.5111132,119.66472,119.8183269,119.9719337,120.1255405,120.3410954,120.6199926,120.9031699,121.1905016,121.4818542,121.7770873,122.0760531,122.3785971,122.6845585,122.9937702,123.3060594,123.6212477,123.9391517,124.259583,124.582349,124.9072533,125.2340954,125.5626719,125.8927766,126.2242007,126.5567339,126.890164,127.5350476,128.1804012,128.8260108,129.4716627,130.1171441,130.7622433,131.4067503,132.0504575,132.6931595,133.3346546,133.9747441,134.613234,135.2499343,135.8846604,136.5172331,137.1474793,137.775232,138.4003314,139.0226251,139.6419683,140.2582245,140.871266,141.4809741,142.0872396,142.6899633,143.2890561,143.8844398,144.4760473,145.0638225,145.6477213,146.2277117,146.8037739,147.7231425,148.6385812,149.5501089,150.4577574,151.3615723,152.2616127,153.1579516,154.0506758,154.9398859,155.8256967,156.7082371,157.5876498,158.4640915,159.3377331,160.2087588,161.0773667,161.9437682,162.808188,163.6708636,164.532045,165.3919945,166.2509863,167.1093059,167.9672494,168.8251236,169.6832447,170.5419378,171.4015367,172.2623823,173.1248225,173.9892108,174.8559057,175.4924136,176.1319554,176.7748977,177.4216077,178.0724516,178.7277933,179.3879931,180.0534062,180.724381,181.4012578,182.0843664,182.7740249,183.4705376,184.1741929,184.8852616,185.6039941,186.3306187,187.0653393,187.8083325,188.5597454,189.3196931,190.0882554,190.8654747,191.6513525,192.4458466,193.2488681,194.0602778,194.8798829,195.7074339,196.5426204,197.385068,198.2343338,198.9538561,199.6790907,200.4093662,201.1439264,201.8819257,202.6224249,203.3643859,204.1066673,204.8480193,205.5870782,206.3223613,207.0522618,207.7750424,208.4888303,209.1916107,209.8812214,210.5553457,211.2115068,211.8470607,212.4591899,213.0448962,213.6009936,214.1241015,214.6106366,215.0568061,215.4995219,215.9422376]       
    
    CS2_38=[29.10206571,37.72371374,46.30597344,54.85235886,56.62552062,58.36924525,60.0864704,61.77995584,63.99136847,66.1840545,68.36028042,70.5221612,71.42482968,72.3169529,73.20022769,74.07622309,74.94638596,75.81204639,76.67442293,77.53462772,78.06032948,78.58578435,79.1118146,79.63915516,80.16845805,80.70029674,81.23517027,81.7735073,82.31567006,82.86195812,83.41261208,83.96781717,84.43206697,84.90108576,85.37491275,85.85354489,86.33693981,86.82501875,87.3176694,87.81474849,88.31608449,88.82148004,89.33071439,89.84354565,90.3597131,90.87893921,91.40093175,91.92538572,92.45198521,92.98040518,93.51031314,94.04137091,94.57323595,95.10556296,95.63800534,96.17021635,96.70185045,97.23256457,97.76201907,98.28987884,98.81581444,99.33950279,99.86062827,100.3788833,100.799267,101.2161926,101.6293813,102.0385652,102.4434876,102.8439039,103.2395815,103.6303009,104.0158552,104.396051,104.7707085,105.139662,105.5027592,105.8598624,106.2108481,106.5556068,106.8940438,107.2260783,107.5516441,107.8706892,108.1831756,108.4890795,108.788391,109.0811137,109.367265,109.6468755,109.9199887,110.186661,110.4469615,110.7009711,110.9487829,111.1905014,111.3580991,111.5198456,111.6758782,111.8263436,111.9713985,112.1112087,112.2459489,112.3782155,112.5104821,112.6427487,112.7750153,112.9072819,113.0395485,113.1718151,113.3040817,113.4363483,113.5686149,113.7008816,113.8331482,113.9654148,114.0976814,114.229948,114.3622146,114.4944812,114.6267478,114.7590144,114.891281,115.0235477,115.1558143,115.2880809,115.4203475,115.5526141,115.6475159,115.7424177,115.8373195,115.9322214,116.0271232,116.122025,116.2169268,116.3118286,116.4067305,116.5016323,116.5965341,116.6914359,116.7863377,116.8812396,116.9761414,117.0710432,117.165945,117.2608468,117.3557486,117.4506505,117.5455523,117.6404541,117.735356,117.8302578,117.9251596,118.0200614,118.1149632,118.209865,118.3047668,118.3996687,118.4945705,118.5894723,118.7430791,118.8966859,119.0502928,119.2038996,119.3575064,119.5111132,119.66472,119.8183269,119.9719337,120.1255405,120.3410954,120.6199926,120.9031699,121.1905016,121.4818542,121.7770873,122.0760531,122.3785971,122.6845585,122.9937702,123.3060594,123.6212477,123.9391517,124.259583,124.582349,124.9072533,125.2340954,125.5626719,125.8927766,126.2242007,126.5567339,126.890164,127.5350476,128.1804012,128.8260108,129.4716627,130.1171441,130.7622433,131.4067503,132.0504575,132.6931595,133.3346546,133.9747441,134.613234,135.2499343,135.8846604,136.5172331,137.1474793,137.775232,138.4003314,139.0226251,139.6419683,140.2582245,140.871266,141.4809741,142.0872396,142.6899633,143.2890561,143.8844398,144.4760473,145.0638225,145.6477213,146.2277117,146.8037739,147.7231425,148.6385812,149.5501089,150.4577574,151.3615723,152.2616127,153.1579516,154.0506758,154.9398859,155.8256967,156.7082371,157.5876498,158.4640915,159.3377331,160.2087588,161.0773667,161.9437682,162.808188,163.6708636,164.532045,165.3919945,166.2509863,167.1093059,167.9672494,168.8251236,169.6832447,170.5419378,171.4015367,172.2623823,173.1248225,173.9892108,174.8559057,175.4924136,176.1319554,176.7748977,177.4216077,178.0724516,178.7277933,179.3879931,180.0534062,180.724381,181.4012578,182.0843664,182.7740249,183.4705376,184.1741929,184.8852616,185.6039941,186.3306187,187.0653393,187.8083325,188.5597454,189.3196931,190.0882554,190.8654747,191.6513525,192.4458466,193.2488681,194.0602778,194.8798829,195.7074339,196.5426204,197.385068,198.2343338,198.9538561,199.6790907,200.4093662,201.1439264,201.8819257,202.6224249,203.3643859,204.1066673,204.8480193,205.5870782,206.3223613,207.0522618,207.7750424,208.4888303,209.1916107,209.8812214,210.5553457,211.2115068,211.8470607,212.4591899,213.0448962,213.6009936,214.1241015,214.6106366,215.0568061,215.4995219,215.9422376]       


    fig, ax = plt.subplots()
    # 在生成的坐标系下画折线图
    ax.plot(CS2_35, linewidth=1,c='b',label="c1")
    ax.plot(CS2_36, linewidth=1,c='g',label="c4")
    ax.plot(CS2_37, linewidth=1,c='y',label="c6")
    ax.plot(CS2_38, linewidth=1,c='r',label="c6")

    # 显示图形
    font1 = { 
    'weight' : 'normal',
    'size' : 14,
    }
        
          
        #设置横纵坐标的名称以及对应字体格式
    font2 = {#'family' : 'Times New Roman',
    'weight' : 'normal',
    'size' : 30,
    }
        
    plt.xlabel('Cycle',font1) #X轴标签
    plt.ylabel("Capacity (Ah)",font1) #Y轴标签
    plt.legend()
    plt.savefig(last_last_last_last_path+r'\figure\by_code\Dataset_IGBT_curves_comparision.eps',dpi=800,format='eps',bbox_inches = 'tight')
    plt.savefig(last_last_last_last_path+r'\figure\by_code\Dataset_IGBT_curves_comparision.png',dpi=800,format='png',bbox_inches = 'tight')
    plt.show()
    
    return CS2_35[:-5],CS2_36[:-5],CS2_37[:-5],CS2_38[:-5]



CS2_35,CS2_36,CS2_37,CS2_38=get_data_list()


print(CS2_35)

CS2_35=list(-(np.array(CS2_35)-CS2_35[0]))
CS2_36=list(-(np.array(CS2_36)-CS2_36[0]))
CS2_37=list(-(np.array(CS2_37)-CS2_37[0]))
CS2_38=list(-(np.array(CS2_38)-CS2_38[0]))

print(CS2_35)


print(CS2_35[0])
print(CS2_36[0])
print(CS2_37[0])
print(CS2_38[0])

def get_health_list(CS2_35,shed):
    for i in range(len(CS2_35)):
        if CS2_35[i]<shed:                           ########################################   小于门槛值
            CS235=CS2_35[0:i]
            return CS235




def get_input_out(CS235,CS237,CS236):
    min_len=min(len(CS235),len(CS236),len(CS237))
    
    input_list=[]
    output_list=[]
    
    true_out_list=[]
    
    CS235_health=get_health_list(CS235,shed) 
    CS237_health=get_health_list(CS237,shed) 
    CS236_health=get_health_list(CS236,shed) 

    
    
    
    for i in range(2,len(CS236_health)):

        
        
        
        # one_input.append(np.array([len(CS235_health),len(CS237_health)]))
        
        








        y = [CS235[0], CS235[min_len-1]]
        x = [0, (min_len-1)*(min_len-1)]
        slope_0, intercept_0, r_value, p_value, std_err = linregress(x, y)

        
        y = [CS237[0], CS237[min_len-1]]
        x = [0,(min_len-1)*(min_len-1)]
        slope_1, intercept_1, r_value, p_value, std_err = linregress(x, y)
        
        
        
        
        
        

        one_input=[]
        one_input.append(np.array(CS235[:i]))
        one_input.append(np.array(CS237[:i]))
        
        one_input.append("CS238")
    
        min_len_train=min(len(CS235),len(CS237))
            
        one_input.append(np.array(CS235[:min_len_train]))
            
      
        one_input.append(np.array(CS237[:min_len_train]))
        
        one_input.append(np.array(CS236[:i]))
        
        
        
        
        
        input_list.append(one_input)
        
        one_out=[]
        one_out.append(np.array(CS236[:i]))
        
        output_list.append(one_out)
        
        true_out_list.append(max(len(CS236_health)-i-1,0))





    
    true_out_array=np.array(true_out_list)
    return input_list[:len(CS236_health)],output_list[:len(CS236_health)],true_out_array[:len(CS236_health)]



#


for i in range(2):
    
    

    if i==1:
        
        input_list,output_list,true_out_array=get_input_out(CS2_35,CS2_36,CS2_37)######第三个变量是测试集 ，前两个是训练集        


    
    rul_pred_list=[]
    
    regress_error_list=[]
    
    for j in range(len(input_list)):
        
        # print(j)
        # print("jjjjjjjjjjjjjjjjjjjjjjjjjj")
        index=j
        def objective(x):
            
            integrate_array=input_list[index][0]*x[0]+input_list[index][1]*x[1]+x[2]
            
            error = np.sum(np.square(integrate_array - output_list[index][0]))/len(integrate_array)
            
            return error    
        


        
        x0=np.ones(3)
        x0[2]=0
 
        
        

        # sol = minimize(objective, x0 ) 
        sol = minimize(objective, x0 ,method='BFGS', options={'maxiter':(1+1)*200,'gtol':1e-5 }  )
        u1=sol.x[0] 
        u2=sol.x[1]
        c1=input_list[j][3]

        c2=input_list[j][4]
        
        offset_vertical=sol.x[2]



        

        pred_online_cruve=u1*input_list[j][0] +u2*input_list[j][1] +offset_vertical
        # pred_curve=u1*c1+u2*c2  + offset_vertical +      np.mean((input_list[j][5] - pred_online_cruve)[-2:] )   
        pred_curve=u1*c1+u2*c2  + offset_vertical +      np.mean((input_list[j][5] - pred_online_cruve)[int(-min(j*0.2,20)):] ) 


#############预测曲线          
        # plt.plot(range(len(pred_curve)), pred_curve)
        # plt.show()
 
#############

        
        ful_pred=len(pred_curve)
        for ii in range(len(pred_curve)):
            
            # if i == len(pred_curve)-1:
                
            #     ful_pred==i
            
            if pred_curve[ii]<shed:
                
                ful_pred=ii
                
                break


        rul_pred_list.append(ful_pred-j-1) #######(-1  because of  begining from 2)





#############实时的拟合曲线与实际曲线的所有点的误差        
        # pred_online_cruve=u1*input_list[j][0] +u2*input_list[j][1]                
        # plt.plot(range(len(input_list[j][5])), input_list[j][5] - pred_online_cruve)
        # plt.show()

#################


                
    
    rul_pred_array=np.array(rul_pred_list)
    
    error_pred_array=rul_pred_array-true_out_array
    
    error_pred_array=np.maximum(error_pred_array, -error_pred_array)
        # print(sol.x)
        
    # print(error_pred_array.sum())
    # print("xxxxx")
    # print(error_pred_array)
        
        
    fig, ax = plt.subplots()
    # 在生成的坐标系下画折线图
    ax.plot(error_pred_array, linewidth=1)
    
    
    
    # 显示图形
    plt.show()   
     
    
    print(i)
    print("rul_pred_array") 
    print(list(rul_pred_array))
    print("true_out_array") 
    print(list(true_out_array))
    print("error_pred_array") 
    print(list(error_pred_array))    

