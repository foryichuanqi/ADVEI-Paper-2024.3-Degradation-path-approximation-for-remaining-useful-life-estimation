# -*- coding: utf-8 -*-
"""
Created on Sun Mar 26 22:25:42 2023

@author: Administrator
"""


import xlrd

import matplotlib.pyplot as plt

import numpy as np

from scipy.optimize import minimize, rosen, rosen_der

from scipy.stats import linregress




import numpy as np
import pandas as pd
import os
import pickle
import scipy as sp
import datetime


import numpy as np

import scipy as sp

import math

from numpy import matmul as mm
from math import sqrt,pi,log, exp

import xlrd

import matplotlib.pyplot as plt

import numpy as np

from scipy.optimize import minimize, rosen, rosen_der

from scipy.stats import linregress

from scipy.stats import norm


import scipy.io as scio


print(os.path.abspath(os.path.join(os.getcwd(), "../..")))
last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../.."))

print(os.path.abspath(os.path.join(os.getcwd(), "..")))
last_path=os.path.abspath(os.path.join(os.getcwd(), ".."))

print(os.path.abspath(os.path.join(os.getcwd(), "../../..")))
last_last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../../.."))


print(os.path.abspath(os.path.join(os.getcwd(), "../../../..")))
last_last_last_last_path=os.path.abspath(os.path.join(os.getcwd(), "../../../.."))


Si=[71, 69, 70, 70, 71, 71, 71, 72, 70, 71, 71, 70, 70, 70, 71, 71, 69, 70, 70, 78, 78, 79, 77, 77, 78, 76, 76, 77, 75, 75, 84, 79, 77, 77, 75, 75, 74, 72, 72, 71, 71, 71, 73, 71, 69, 67, 67, 75, 76, 73, 71, 69, 68, 67, 65, 63, 63, 62, 61, 59, 58, 56, 56, 54, 55, 52, 51, 50, 50, 49, 48, 47, 46, 45, 44, 41, 41, 43, 41, 39, 38, 38, 38, 37, 35, 34, 34, 34, 33, 59, 42, 40, 37, 35, 34, 33, 32, 31, 29, 30, 29, 27, 29, 32, 29, 28, 25, 24, 24, 24, 22, 21, 21, 21, 20, 18, 17, 17, 17, 23, 24, 20, 18, 16, 15, 14, 12, 12, 11, 10, 10, 8, 10, 14, 10, 9, 7, 7, 6, 5, 3, 2, 2, 1, 1, 0]
     
Zhang=[13, 14, 0, 0, 0, 0, 110, 110, 111, 107, 107, 107, 104, 103, 103, 103, 102, 100, 99, 99, 104, 103, 102, 100, 99, 98, 96, 95, 94, 92, 91, 94, 91, 89, 88, 86, 85, 84, 82, 81, 80, 79, 78, 77, 76, 74, 73, 72, 73, 72, 70, 69, 68, 66, 65, 64, 62, 61, 60, 59, 58, 57, 55, 54, 53, 52, 51, 50, 49, 48, 47, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 29, 26, 25, 24, 23, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 12, 11, 9, 8, 7, 7, 5, 4, 3, 2, 1, 3, 2, 2, 2, 4, 5, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
DCNN= [57.339287, 57.25831, 57.15761, 57.047688, 56.928425, 56.810535, 56.652794, 56.4737, 56.27003, 56.015602, 55.72647, 55.40636, 55.068806, 54.719685, 54.3308, 53.926434, 53.510517, 53.212105, 52.997364, 52.891346, 52.80108, 52.72648, 52.663036, 52.56969, 52.478546, 52.38543, 52.293232, 52.18978, 52.198536, 52.23408, 52.26294, 52.253807, 52.181602, 52.055214, 51.86372, 51.531544, 51.07071, 50.437958, 49.785507, 49.115562, 48.49276, 47.86419, 47.21305, 46.5372, 45.79558, 45.12745, 44.505184, 43.8757, 43.178116, 42.550537, 41.94214, 41.325264, 40.69163, 40.00733, 39.31803, 38.625923, 37.908638, 37.14468, 36.329353, 35.464035, 34.554016, 33.61296, 32.659557, 31.629812, 30.516083, 29.269232, 28.037952, 26.867065, 25.731054, 24.624647, 23.532375, 22.459345, 21.41357, 20.369366, 19.333063, 18.356356, 17.415073, 16.511877, 15.626776, 14.786319, 13.977507, 13.229878, 12.504001, 11.829389, 11.20617, 10.643696, 10.1399975, 9.894609, 9.670118, 9.4657955, 9.25506, 9.017349, 8.77429, 8.547444, 8.3368, 8.147097, 7.9911995, 7.8670015, 7.7494125, 7.6352553, 7.5484657, 7.521201, 7.5170774, 7.517745, 7.4741716, 7.371932, 7.205838, 6.888617, 6.7507043, 6.644236, 6.5664268, 6.5109453, 6.4640822, 6.422563, 6.3869457, 6.3602304, 6.3409386, 6.3370457, 6.347509, 6.3441095, 6.311991, 6.259068, 6.2178974, 6.1849155, 6.161479, 6.142614, 6.119878, 6.095611, 6.081123, 6.069086, 6.0580683, 6.0548735, 6.0503526, 6.0437365, 6.044513, 6.050529, 6.0505323, 6.026494, 5.9942036, 5.9718723, 5.9554787, 5.94131, 5.929776, 5.920268]
       
TaFCN=[48.62757, 48.34951, 48.031307, 47.75051, 47.505318, 47.315323, 46.915966, 46.467438, 45.987305, 45.285408, 44.56667, 43.913097, 43.3266, 42.817684, 42.285423, 41.82386, 41.382454, 41.310577, 41.35674, 41.48274, 41.587048, 41.687763, 41.765377, 41.5903, 41.43409, 41.324287, 41.112087, 40.94556, 41.206577, 41.341602, 41.35398, 41.196545, 40.693386, 40.052048, 39.44436, 38.927773, 38.623405, 38.423164, 38.231583, 38.0102, 37.906548, 37.76582, 37.465088, 37.105694, 36.77346, 36.699375, 36.813576, 36.813114, 36.502308, 36.10009, 35.610615, 35.183647, 34.825752, 34.430153, 34.079258, 33.771492, 33.33358, 32.623283, 31.595785, 30.413513, 29.335812, 28.310238, 27.569086, 26.907282, 26.118702, 25.008286, 23.897512, 22.790833, 21.652403, 20.552004, 19.580124, 18.756695, 18.099827, 17.56187, 17.0804, 16.579056, 16.024097, 15.455345, 14.85289, 14.226654, 13.545972, 12.874486, 12.196519, 11.540399, 10.893389, 10.25353, 9.64235, 9.150061, 8.729932, 8.4631605, 8.293872, 8.054728, 7.8718925, 7.6463456, 7.3506303, 7.0144186, 6.7147284, 6.436738, 6.090365, 5.6473603, 5.1784697, 4.757666, 4.536981, 4.5889664, 4.799363, 4.790672, 4.504275, 3.9159093, 3.5652516, 3.251304, 2.9597673, 2.7006633, 2.4766564, 2.2807224, 2.0876417, 1.8946636, 1.7427313, 1.6875105, 1.7341236, 1.8317935, 1.8746793, 1.8137833, 1.701638, 1.566111, 1.4212495, 1.2773049, 1.1455412, 1.0421529, 0.97265613, 0.91955197, 0.8968814, 0.92210615, 0.9597454, 0.99099314, 0.98373014, 0.97556525, 0.96815044, 0.9587822, 0.9497689, 0.94432753, 0.9511595, 0.9647751, 0.98576736, 1.0064211]

Our=[62, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 70, 69, 68, 67, 66, 64, 62, 61, 59, 58, 56, 55, 54, 52, 50, 49, 47, 46, 45, 44, 43, 42, 41, 39, 38, 37, 36, 34, 33, 32, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 14, 13, 12, 11, 10, 9, 6, 5, 4, 3, 2]

groud_truth=[822.0, 821.0, 820.0, 819.0, 818.0, 817.0, 816.0, 815.0, 814.0, 813.0, 812.0, 811.0, 810.0, 809.0, 808.0, 807.0, 806.0, 805.0, 804.0, 803.0, 802.0, 801.0, 800.0, 799.0, 798.0, 797.0, 796.0, 795.0, 794.0, 793.0, 792.0, 791.0, 790.0, 789.0, 788.0, 787.0, 786.0, 785.0, 784.0, 783.0, 782.0, 781.0, 780.0, 779.0, 778.0, 777.0, 776.0, 775.0, 774.0, 773.0, 772.0, 771.0, 770.0, 769.0, 768.0, 767.0, 766.0, 765.0, 764.0, 763.0, 762.0, 761.0, 760.0, 759.0, 758.0, 757.0, 756.0, 755.0, 754.0, 753.0, 752.0, 751.0, 750.0, 749.0, 748.0, 747.0, 746.0, 745.0, 744.0, 743.0, 742.0, 741.0, 740.0, 739.0, 738.0, 737.0, 736.0, 735.0, 734.0, 733.0, 732.0, 731.0, 730.0, 729.0, 728.0, 727.0, 726.0, 725.0, 724.0, 723.0, 722.0, 721.0, 720.0, 719.0, 718.0, 717.0, 716.0, 715.0, 714.0, 713.0, 712.0, 711.0, 710.0, 709.0, 708.0, 707.0, 706.0, 705.0, 704.0, 703.0, 702.0, 701.0, 700.0, 699.0, 698.0, 697.0, 696.0, 695.0, 694.0, 693.0, 692.0, 691.0, 690.0, 689.0, 688.0, 687.0, 686.0, 685.0, 684.0, 683.0, 682.0, 681.0, 680.0, 679.0, 678.0, 677.0, 676.0, 675.0, 674.0, 673.0, 672.0, 671.0, 670.0, 669.0, 668.0, 667.0, 666.0, 665.0, 664.0, 663.0, 662.0, 661.0, 660.0, 659.0, 658.0, 657.0, 656.0, 655.0, 654.0, 653.0, 652.0, 651.0, 650.0, 649.0, 648.0, 647.0, 646.0, 645.0, 644.0, 643.0, 642.0, 641.0, 640.0, 639.0, 638.0, 637.0, 636.0, 635.0, 634.0, 633.0, 632.0, 631.0, 630.0, 629.0, 628.0, 627.0, 626.0, 625.0, 624.0, 623.0, 622.0, 621.0, 620.0, 619.0, 618.0, 617.0, 616.0, 615.0, 614.0, 613.0, 612.0, 611.0, 610.0, 609.0, 608.0, 607.0, 606.0, 605.0, 604.0, 603.0, 602.0, 601.0, 600.0, 599.0, 598.0, 597.0, 596.0, 595.0, 594.0, 593.0, 592.0, 591.0, 590.0, 589.0, 588.0, 587.0, 586.0, 585.0, 584.0, 583.0, 582.0, 581.0, 580.0, 579.0, 578.0, 577.0, 576.0, 575.0, 574.0, 573.0, 572.0, 571.0, 570.0, 569.0, 568.0, 567.0, 566.0, 565.0, 564.0, 563.0, 562.0, 561.0, 560.0, 559.0, 558.0, 557.0, 556.0, 555.0, 554.0, 553.0, 552.0, 551.0, 550.0, 549.0, 548.0, 547.0, 546.0, 545.0, 544.0, 543.0, 542.0, 541.0, 540.0, 539.0, 538.0, 537.0, 536.0, 535.0, 534.0, 533.0, 532.0, 531.0, 530.0, 529.0, 528.0, 527.0, 526.0, 525.0, 524.0, 523.0, 522.0, 521.0, 520.0, 519.0, 518.0, 517.0, 516.0, 515.0, 514.0, 513.0, 512.0, 511.0, 510.0, 509.0, 508.0, 507.0, 506.0, 505.0, 504.0, 503.0, 502.0, 501.0, 500.0, 499.0, 498.0, 497.0, 496.0, 495.0, 494.0, 493.0, 492.0, 491.0, 490.0, 489.0, 488.0, 487.0, 486.0, 485.0, 484.0, 483.0, 482.0, 481.0, 480.0, 479.0, 478.0, 477.0, 476.0, 475.0, 474.0, 473.0, 472.0, 471.0, 470.0, 469.0, 468.0, 467.0, 466.0, 465.0, 464.0, 463.0, 462.0, 461.0, 460.0, 459.0, 458.0, 457.0, 456.0, 455.0, 454.0, 453.0, 452.0, 451.0, 450.0, 449.0, 448.0, 447.0, 446.0, 445.0, 444.0, 443.0, 442.0, 441.0, 440.0, 439.0, 438.0, 437.0, 436.0, 435.0, 434.0, 433.0, 432.0, 431.0, 430.0, 429.0, 428.0, 427.0, 426.0, 425.0, 424.0, 423.0, 422.0, 421.0, 420.0, 419.0, 418.0, 417.0, 416.0, 415.0, 414.0, 413.0, 412.0, 411.0, 410.0, 409.0, 408.0, 407.0, 406.0, 405.0, 404.0, 403.0, 402.0, 401.0, 400.0, 399.0, 398.0, 397.0, 396.0, 395.0, 394.0, 393.0, 392.0, 391.0, 390.0, 389.0, 388.0, 387.0, 386.0, 385.0, 384.0, 383.0, 382.0, 381.0, 380.0, 379.0, 378.0, 377.0, 376.0, 375.0, 374.0, 373.0, 372.0, 371.0, 370.0, 369.0, 368.0, 367.0, 366.0, 365.0, 364.0, 363.0, 362.0, 361.0, 360.0, 359.0, 358.0, 357.0, 356.0, 355.0, 354.0, 353.0, 352.0, 351.0, 350.0, 349.0, 348.0, 347.0, 346.0, 345.0, 344.0, 343.0, 342.0, 341.0, 340.0, 339.0, 338.0, 337.0, 336.0, 335.0, 334.0, 333.0, 332.0, 331.0, 330.0, 329.0, 328.0, 327.0, 326.0, 325.0, 324.0, 323.0, 322.0, 321.0, 320.0, 319.0, 318.0, 317.0, 316.0, 315.0, 314.0, 313.0, 312.0, 311.0, 310.0, 309.0, 308.0, 307.0, 306.0, 305.0, 304.0, 303.0, 302.0, 301.0, 300.0, 299.0, 298.0, 297.0, 296.0, 295.0, 294.0, 293.0, 292.0, 291.0, 290.0, 289.0, 288.0, 287.0, 286.0, 285.0, 284.0, 283.0, 282.0, 281.0, 280.0, 279.0, 278.0, 277.0, 276.0, 275.0, 274.0, 273.0, 272.0, 271.0, 270.0, 269.0, 268.0, 267.0, 266.0, 265.0, 264.0, 263.0, 262.0, 261.0, 260.0, 259.0, 258.0, 257.0, 256.0, 255.0, 254.0, 253.0, 252.0, 251.0, 250.0, 249.0, 248.0, 247.0, 246.0, 245.0, 244.0, 243.0, 242.0, 241.0, 240.0, 239.0, 238.0, 237.0, 236.0, 235.0, 234.0, 233.0, 232.0, 231.0, 230.0, 229.0, 228.0, 227.0, 226.0, 225.0, 224.0, 223.0, 222.0, 221.0, 220.0, 219.0, 218.0, 217.0, 216.0, 215.0, 214.0, 213.0, 212.0, 211.0, 210.0, 209.0, 208.0, 207.0, 206.0, 205.0, 204.0, 203.0, 202.0, 201.0, 200.0, 199.0, 198.0, 197.0, 196.0, 195.0, 194.0, 193.0, 192.0, 191.0, 190.0, 189.0, 188.0, 187.0, 186.0, 185.0, 184.0, 183.0, 182.0, 181.0, 180.0, 179.0, 178.0, 177.0, 176.0, 175.0, 174.0, 173.0, 172.0, 171.0, 170.0, 169.0, 168.0, 167.0, 166.0, 165.0, 164.0, 163.0, 162.0, 161.0, 160.0, 159.0, 158.0, 157.0, 156.0, 155.0, 154.0, 153.0, 152.0, 151.0, 150.0, 149.0, 148.0, 147.0, 146.0, 145.0, 144.0, 143.0, 142.0, 141.0, 140.0, 139.0, 138.0, 137.0, 136.0, 135.0, 134.0, 133.0, 132.0, 131.0, 130.0, 129.0, 128.0, 127.0, 126.0, 125.0, 124.0, 123.0, 122.0, 121.0, 120.0, 119.0, 118.0, 117.0, 116.0, 115.0, 114.0, 113.0, 112.0, 111.0, 110.0, 109.0, 108.0, 107.0, 106.0, 105.0, 104.0, 103.0, 102.0, 101.0, 100.0, 99.0, 98.0, 97.0, 96.0, 95.0, 94.0, 93.0, 92.0, 91.0, 90.0, 89.0, 88.0, 87.0, 86.0, 85.0, 84.0, 83.0, 82.0, 81.0, 80.0, 79.0, 78.0, 77.0, 76.0, 75.0, 74.0, 73.0, 72.0, 71.0, 70.0, 69.0, 68.0, 67.0, 66.0, 65.0, 64.0, 63.0, 62.0, 61.0, 60.0, 59.0, 58.0, 57.0, 56.0, 55.0, 54.0, 53.0, 52.0, 51.0, 50.0, 49.0, 48.0, 47.0, 46.0, 45.0, 44.0, 43.0, 42.0, 41.0, 40.0, 39.0, 38.0, 37.0, 36.0, 35.0, 34.0, 33.0, 32.0, 31.0, 30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]


min_len=min(len(Si),len(Zhang),len(TaFCN),len(Our))-5

fig, ax = plt.subplots(figsize = (7, 4))
# 在生成的坐标系下画折线图
ax.plot(groud_truth[-min_len:], linewidth=1,c='black',label="Groud truth")
ax.plot(Si[-min_len:], linewidth=2,c='b',label="Si' model",linestyle='-.')
ax.plot(Zhang[-min_len:], linewidth=2,c='g',label="Zhang' model",linestyle='-.')
ax.plot(DCNN[-min_len:], linewidth=2,c='#E47833',label="DCNN",linestyle='-.')
ax.plot(TaFCN[-min_len:], linewidth=2,c='y',label="TaFCN",linestyle='-.')


ax.plot(Our[-min_len:], linewidth=2,c='r',label="Our",linestyle='-.')
# 显示图形
font1 = { 
'weight' : 'normal',
'size' : 14,
}
    
      
    #设置横纵坐标的名称以及对应字体格式
font2 = {#'family' : 'Times New Roman',
'weight' : 'normal',
'size' : 30,
}
error_rate=0.2
error_rate_1=0.4
# plt.fill_between(range(min_len), np.array(groud_truth[-min_len:])*(1+error_rate), np.array(groud_truth[-min_len:])*(1-error_rate),color="#CCCCCC",label='Error band (±{:.0%})'.format(error_rate))# color="#CCEEFF")
# plt.fill_between(range(min_len), np.array(groud_truth[-min_len:])*(1+error_rate), np.array(groud_truth[-min_len:])*(1+error_rate_1),color="#FFCCFF",label='Error band ({:.0%},{:.0%})'.format(error_rate,error_rate_1))# color="#CCEEFF")
# plt.fill_between(range(min_len), np.array(groud_truth[-min_len:])*(1-error_rate), np.array(groud_truth[-min_len:])*(1-error_rate_1),color="#FFB9E6")# color="#CCEEFF")
       
plt.xlabel('Charging cycle times (cycle)',font1) #X轴标签
plt.ylabel("Predicted RUL (cycle)",font1) #Y轴标签
plt.grid(alpha=0.5,linestyle='-.') #网格线，更好看
plt.legend()
plt.savefig(last_last_last_path+r'\figure\by_code\prediction_rul_nasa_6_7.eps',dpi=800,format='eps',bbox_inches = 'tight')
plt.savefig(last_last_last_path+r'\figure\by_code\prediction_rul_nasa_6_7.png',dpi=800,format='png',bbox_inches = 'tight')
plt.show()


Si_error=[74.0, 75.0, 73.0, 72.0, 70.0, 69.0, 68.0, 66.0, 67.0, 65.0, 64.0, 64.0, 63.0, 62.0, 60.0, 59.0, 60.0, 58.0, 57.0, 48.0, 47.0, 45.0, 46.0, 45.0, 43.0, 44.0, 43.0, 41.0, 42.0, 41.0, 31.0, 35.0, 36.0, 35.0, 36.0, 35.0, 35.0, 36.0, 35.0, 35.0, 34.0, 33.0, 30.0, 31.0, 32.0, 33.0, 32.0, 23.0, 21.0, 23.0, 24.0, 25.0, 25.0, 25.0, 26.0, 27.0, 26.0, 26.0, 26.0, 27.0, 27.0, 28.0, 27.0, 28.0, 26.0, 28.0, 28.0, 28.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 29.0, 28.0, 25.0, 26.0, 27.0, 27.0, 26.0, 25.0, 25.0, 26.0, 26.0, 25.0, 24.0, 24.0, 3.0, 13.0, 14.0, 16.0, 17.0, 17.0, 17.0, 17.0, 17.0, 18.0, 16.0, 16.0, 17.0, 14.0, 10.0, 12.0, 12.0, 14.0, 14.0, 13.0, 12.0, 13.0, 13.0, 12.0, 11.0, 11.0, 12.0, 12.0, 11.0, 10.0, 3.0, 1.0, 4.0, 5.0, 6.0, 6.0, 6.0, 7.0, 6.0, 6.0, 6.0, 5.0, 6.0, 3.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0]
     
# Zhang_error=[132.0, 130.0, 143.0, 142.0, 141.0, 140.0, 25.0, 23.0, 22.0, 25.0, 24.0, 23.0, 25.0, 24.0, 23.0, 22.0, 22.0, 24.0, 23.0, 22.0, 16.0, 16.0, 16.0, 17.0, 17.0, 17.0, 18.0, 18.0, 18.0, 19.0, 19.0, 15.0, 17.0, 18.0, 18.0, 19.0, 19.0, 19.0, 20.0, 20.0, 21.0, 20.0, 21.0, 20.0, 20.0, 21.0, 21.0, 22.0, 19.0, 19.0, 20.0, 20.0, 21.0, 21.0, 21.0, 22.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 25.0, 25.0, 24.0, 24.0, 25.0, 25.0, 25.0, 24.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 21.0, 23.0, 23.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 23.0, 19.0, 20.0, 20.0, 19.0, 19.0, 18.0, 17.0, 16.0, 16.0, 15.0, 14.0, 13.0, 12.0, 10.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]
# Zhang_error=[132.0, 130.0, 143.0, 142.0, 141.0, 140.0, 34.0, 33.0, 31.0, 34.0, 33.0, 32.0, 34.0, 33.0, 32.0, 32.0, 31.0, 33.0, 32.0, 32.0, 26.0, 26.0, 26.0, 27.0, 27.0, 27.0, 28.0, 28.0, 28.0, 29.0, 28.0, 25.0, 27.0, 28.0, 28.0, 29.0, 28.0, 29.0, 30.0, 30.0, 30.0, 30.0, 30.0, 29.0, 30.0, 30.0, 31.0, 31.0, 29.0, 28.0, 29.0, 30.0, 30.0, 30.0, 30.0, 31.0, 31.0, 31.0, 31.0, 31.0, 32.0, 32.0, 32.0, 32.0, 33.0, 32.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 34.0, 34.0, 33.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 30.0, 32.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 30.0, 29.0, 28.0, 27.0, 27.0, 26.0, 26.0, 25.0, 24.0, 21.0, 19.0, 20.0, 20.0, 19.0, 19.0, 18.0, 17.0, 16.0, 16.0, 15.0, 14.0, 13.0, 12.0, 10.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]        

Zhang_error=[132.0, 130.0, 143.0, 142.0, 141.0, 140.0, 29.0, 28.0, 26.0, 29.0, 28.0, 27.0, 29.0, 29.0, 28.0, 27.0, 27.0, 28.0, 28.0, 27.0, 21.0, 21.0, 21.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 24.0, 24.0, 20.0, 22.0, 23.0, 23.0, 24.0, 24.0, 24.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 26.0, 26.0, 26.0, 24.0, 24.0, 25.0, 25.0, 25.0, 26.0, 26.0, 26.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 26.0, 28.0, 28.0, 28.0, 28.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 28.0, 28.0, 28.0, 29.0, 29.0, 29.0, 28.0, 29.0, 29.0, 29.0, 29.0, 29.0, 26.0, 26.0, 25.0, 24.0, 21.0, 19.0, 20.0, 20.0, 19.0, 19.0, 18.0, 17.0, 16.0, 16.0, 15.0, 14.0, 13.0, 12.0, 10.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]
DCNN_error=[85.66071243286133, 84.74169616699218, 83.84238739013672, 82.95231475830079, 82.07157592773437, 81.18946533203125, 80.34720382690429, 79.52630081176758, 78.72996520996094, 77.98440399169922, 77.27352600097656, 76.59363861083985, 75.93119201660156, 75.28031387329102, 74.66920013427735, 74.07356796264648, 73.48948135375977, 72.78789367675782, 72.00263442993165, 71.10865478515625, 70.19891510009765, 69.27352447509766, 68.33696823120117, 67.43030700683593, 66.52145538330078, 65.61456604003907, 64.70676651000977, 63.81021728515625, 62.80146484375, 61.76591415405274, 60.73706283569336, 59.74619369506836, 58.81839599609375, 57.9447883605957, 57.13628311157227, 56.4684555053711, 55.92929229736328, 55.56204528808594, 55.214490509033205, 54.884436798095706, 54.507240295410156, 54.13581314086914, 53.786947631835936, 53.462798309326175, 53.204419708251955, 52.872552490234376, 52.494815063476565, 52.12429962158203, 51.82188720703125, 51.44946212768555, 51.05785980224609, 50.67473449707031, 50.30836791992188, 49.992671203613284, 49.681966400146486, 49.37407684326172, 49.09136276245117, 48.85531845092773, 48.67064514160156, 48.535963439941405, 48.44598388671875, 48.38703842163086, 48.34044342041015, 48.370186996459964, 48.48391571044922, 48.73076858520508, 48.96204605102539, 49.132934188842775, 49.268944549560544, 49.37535285949707, 49.46762580871582, 49.540653991699216, 49.58642768859863, 49.63063507080078, 49.66693878173828, 49.64364433288574, 49.584926986694335, 49.48812198638916, 49.373224067687985, 49.213680267333984, 49.02249336242676, 48.77012176513672, 48.49599914550781, 48.17061157226563, 47.79383087158203, 47.356303215026855, 46.86000232696533, 46.10538997650146, 45.32988109588623, 44.53420505523682, 43.74493885040283, 42.98265132904053, 42.225710010528566, 41.45255584716797, 40.66320114135742, 39.852903270721434, 39.008800983428955, 38.1329984664917, 37.25058765411377, 36.3647442817688, 35.45153408050537, 34.47879848480225, 33.48292217254639, 32.48225469589234, 31.525828170776368, 30.628067874908446, 29.79416208267212, 29.111382389068602, 28.24929552078247, 27.35576367378235, 26.433572912216185, 25.489054441452026, 24.53591799736023, 23.577436399459838, 22.61305456161499, 21.639769506454467, 20.65906114578247, 19.662954139709473, 18.65249094963074, 17.655890703201294, 16.688009214401244, 15.74093189239502, 14.782102847099305, 13.815084385871888, 12.838520717620849, 11.857385849952697, 10.880122590065003, 9.904388523101806, 8.918877053260804, 7.930914044380188, 6.941931653022766, 5.945126533508301, 4.94964747428894, 3.95626380443573, 2.9554864168167114, 2.2371399879455565, 1.9821931362152099, 2.1853905439376833, 2.4001699924468993, 2.989093780517578, 3.581574892997742, 4.1749168872833256, 4.929776287078857, 5.920267915725708]


TaFCN_error=[94.37242698669434, 93.65049057006836, 92.96869316101075, 92.2494888305664, 91.49468116760254, 90.68467445373535, 90.08403282165527, 89.53256225585938, 89.01269264221192, 88.7145896911621, 88.43333168029785, 88.0869010925293, 87.67339859008788, 87.18231735229492, 86.7145767211914, 86.1761432647705, 85.6175479888916, 84.68942298889161, 83.64326286315918, 82.51726150512695, 81.41295356750489, 80.31223831176757, 79.23462028503418, 78.40969848632812, 77.56590957641602, 76.67571334838867, 75.88791160583496, 75.05444221496582, 73.79342079162598, 72.65840225219726, 71.6460174560547, 70.80345306396484, 70.30661468505859, 69.947953414917, 69.55564155578614, 69.07222480773926, 68.37660140991211, 67.57683944702148, 66.76841812133789, 65.98979949951172, 65.09345016479492, 64.23417778015137, 63.53491439819336, 62.89430618286133, 62.22654075622559, 61.300627899169925, 60.18642578125, 59.18688278198242, 58.49769592285156, 57.899910354614256, 57.38938827514649, 56.81635284423828, 56.174248123168944, 55.56985168457031, 54.920742416381835, 54.22850875854492, 53.666421508789064, 53.37671318054199, 53.40421562194824, 53.5864875793457, 53.66418876647949, 53.68976173400879, 53.430914306640624, 53.09272079467773, 52.88129806518555, 52.99171447753906, 53.10248641967773, 53.209167289733884, 53.3475959777832, 53.447995567321776, 53.41987762451172, 53.243306159973145, 52.900174903869626, 52.43813056945801, 51.91959896087646, 51.42094459533691, 50.97590274810791, 50.54465503692627, 50.14710960388184, 49.77334642410278, 49.454029369354245, 49.12551403045654, 48.80348196029663, 48.45960168838501, 48.10661067962646, 47.746470260620114, 47.357649898529054, 46.84993925094604, 46.27006855010986, 45.536839389801024, 44.70612773895264, 43.9452730178833, 43.128107929229735, 42.35365495681763, 41.64937000274658, 40.98558130264282, 40.28527126312256, 39.56326279640198, 38.90963549613953, 38.35263981819153, 37.8215304851532, 37.24233393669128, 36.46301898956299, 35.41103367805481, 34.200636863708496, 33.20932807922363, 32.495725345611575, 32.08409080505371, 31.434748125076293, 30.748696088790894, 30.040232682228087, 29.29933657646179, 28.523343563079834, 27.719277477264406, 26.912358009815215, 26.10533664226532, 25.257268822193147, 24.31248949766159, 23.265876507759096, 22.16820651292801, 21.125320422649384, 20.186216878890992, 19.298361909389495, 18.433889085054396, 17.578750485181807, 16.722695219516755, 15.854458782076836, 14.957847067713738, 14.027343833446503, 13.08044799566269, 12.103118631243706, 11.077893844246864, 10.04025466442108, 9.009006845951081, 8.016269916296006, 7.0244347035884855, 6.0318495854735374, 5.041217774152756, 4.050231209397316, 3.055672472715378, 2.0488404870033263, 1.1157315105199814, 0.6154629394412041, 1.006421086192131]

Our_error=[81, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 19, 19, 19, 19, 19, 18, 17, 17, 16, 16, 15, 15, 15, 14, 13, 13, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2]

min_len=min(len(Si),len(Zhang),len(TaFCN),len(Our))-5

fig, ax = plt.subplots(figsize = (7, 4))
# 在生成的坐标系下画折线图

ax.plot(np.arange(min_len,0,-1),Si_error[-min_len:], linewidth=2,c='b',label="Si' model",linestyle='--')
ax.plot(np.arange(min_len,0,-1),Zhang_error[-min_len:], linewidth=2,c='g',label="Zhang' model",linestyle='--')
ax.plot(np.arange(min_len,0,-1),DCNN_error[-min_len:], linewidth=2,c='#E47833',label="DCNN",linestyle='--')
ax.plot(np.arange(min_len,0,-1),TaFCN_error[-min_len:], linewidth=2,c='y',label="TaFCN",linestyle='--')
ax.plot(np.arange(min_len,0,-1),Our_error[-min_len:], linewidth=2,c='r',label="Our",linestyle='--')
# ax.plot(groud_truth[-min_len:], linewidth=1,c='black',label="Groud truth")

def rmse(x):
    s=0
    for i in x:
        s+=i*i
    r=sqrt(s/len(x))
    return r

def aae(x):
    return np.mean(x)


def score(Y_test,Y_pred) :
      
    s=0    
    for i in range(len(Y_pred)):
        if Y_pred[i]>Y_test[i]:
            s=s+math.exp((Y_pred[i]-Y_test[i])/10)-1
        else:
            s=s+math.exp((Y_test[i]-Y_pred[i])/13)-1    
    # print('unbalanced_penalty_score{}'.format(s))
    return s  
  
def error_range(Y_test,Y_pred) : 
    Y_test =np.array(Y_test)  
    Y_pred =np.array(Y_pred) 
     
    error_range=(Y_test-Y_pred).min(),(Y_test-Y_pred).max()
    # print('error range{}'.format(error_range))
    return error_range

        
        
def error_list(Y_test,Y_pred) : 
    Y_test =np.array(Y_test)  
    Y_pred =np.array(Y_pred) 

    error_list=Y_test-Y_pred
    # Y_test =np.array(Y_test)  
    # Y_pred =np.array(Y_pred) 
     
    # error_range=(Y_test-Y_pred).min(),(Y_test-Y_pred).max()
    # print('error range{}'.format(error_range))
    return list(error_list)

print(list((error_list(groud_truth[-min_len:],Si[-min_len:]),error_list(groud_truth[-min_len:],Zhang[-min_len:]),error_list(groud_truth[-min_len:],DCNN[-min_len:]),error_list(groud_truth[-min_len:],TaFCN[-min_len:]),error_list(groud_truth[-min_len:],Our[-min_len:]))))
        
print(list((rmse(Si_error[-min_len:]),rmse(Zhang_error[-min_len:]),rmse(DCNN_error[-min_len:]),rmse(TaFCN_error[-min_len:]),rmse(Our_error[-min_len:]))))
print(list((aae(Si_error[-min_len:]),aae(Zhang_error[-min_len:]),aae(DCNN_error[-min_len:]),aae(TaFCN_error[-min_len:]),aae(Our_error[-min_len:]))))
print(list((score(groud_truth[-min_len:],Si[-min_len:]),score(groud_truth[-min_len:],Zhang[-min_len:]),score(groud_truth[-min_len:],DCNN[-min_len:]),score(groud_truth[-min_len:],TaFCN[-min_len:]),score(groud_truth[-min_len:],Our[-min_len:]))))
print(list((error_range(groud_truth[-min_len:],Si[-min_len:]),error_range(groud_truth[-min_len:],Zhang[-min_len:]),error_range(groud_truth[-min_len:],DCNN[-min_len:]),error_range(groud_truth[-min_len:],TaFCN[-min_len:]),error_range(groud_truth[-min_len:],Our[-min_len:]))))



def predcition(targets,predictions):
    targets=np.array(targets)
    predictions=np.array(predictions)
    
    
    # targets=np.array(targets)
    # predictions=np.array(predictions)

    

    smape = np.sum( np.abs(predictions - targets)) /np.sum( np.abs( targets)) * 100
    print(np.sum( np.abs(predictions - targets)))
    
    print(np.sum( np.abs( targets)))
    
    print(smape)
    y=100-smape
    
    # print(y)
    return y 

print(list((predcition(groud_truth[-min_len:],Si[-min_len:]),predcition(groud_truth[-min_len:],Zhang[-min_len:]),predcition(groud_truth[-min_len:],DCNN[-min_len:]),predcition(groud_truth[-min_len:],TaFCN[-min_len:]),predcition(groud_truth[-min_len:],Our[-min_len:]))))


# 显示图形
font1 = { 
'weight' : 'normal',
'size' : 14,
}
    
      
    #设置横纵坐标的名称以及对应字体格式
font2 = {#'family' : 'Times New Roman',
'weight' : 'normal',
'size' : 30,
}
error_rate=0.4
error_rate_1=0.8
plt.fill_between(np.arange(min_len,0,-1), np.array(np.arange(min_len,0,-1))*(error_rate), np.arange(min_len,0,-1)*0,color="#CCCCCC",label='Error band (±{:.0%})'.format(error_rate))# color="#CCEEFF")
plt.fill_between(np.arange(min_len,0,-1), np.array(np.arange(min_len,0,-1))*(error_rate), np.array(np.arange(min_len,0,-1))*(error_rate_1),color="#E7E7E7",label='Error band (±{:.0%})'.format(error_rate_1))# color="#CCEEFF")
plt.xlabel('Actual RUL (cycle)',font1) #X轴标签
plt.ylabel("Absolute prediction error (cycle)",font1) #Y轴标签
plt.gca().invert_xaxis()
plt.grid(alpha=0.5,linestyle='-.') #网格线，更好看
plt.legend()
plt.savefig(last_last_last_path+r'\figure\by_code\The_absolute_error_of_predicted_RUL_nasa_6_7.eps',dpi=800,format='eps',bbox_inches = 'tight')
plt.savefig(last_last_last_path+r'\figure\by_code\The_absolute_error_of_predicted_RUL_nasa_6_7.png',dpi=800,format='png',bbox_inches = 'tight')
plt.show()


